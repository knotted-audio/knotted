{"version":3,"sources":["components/Waveform.worker.js","worker.js","components/Waveform.js","actions/loop.js","actions/grid.js","components/LoopPanel.js","components/GridPanel.js","reducers/loopReducer.js","components/MidiPanel.js","audioUtils.js","components/Controls.js","App.js","reducers/gridReducer.js","middlewares/midiListener.js","reducers/rootReducer.js","middlewares/audioScheduler.js","middlewares/visualScheduler.js","engines/kick.js","engines/snare.js","engines/hat.js","engines/clap.js","engines/cymbal.js","serviceWorker.js","index.js","store.js"],"names":["addMethods","methods","module","exports","w","Worker","name","Waveform","props","buffer","width","height","zoom","color","onDone","pixelRatio","window","devicePixelRatio","canvas","useRef","worker","useLayoutEffect","middle","data","getChannelData","step","Math","ceil","length","offscreenCanvas","current","transferControlToOffscreen","postMessage","type","payload","fillStyle","onmessage","event","dw","floor","dh","style","ref","memo","prevProps","nextProps","id","createLoop","randomColor","uuidv4","TOGGLE_PLAY","togglePlay","setLoopLength","loopLength","Loop","index","active","tempo","setActiveLoopA","beatDuration","lengthInBeats","round","duration","useDrag","item","opacity","drag","className","paddingTop","onClick","connect","state","loops","loop","activeLoop","grid","dispatch","createLoopA","loopId","setActiveLoop","map","l","key","GridLoopMarker","soft","numMarkers","backgroundColor","Grid","beat","loopTriggers","barBeat","loopTails","setGridElemA","addLoopInstanceA","drop","useDrop","accept","instanceId","activeLoops","g","originLoop","find","range","flat","filter","start","end","val","domElem","setGridElem","addLoopInstance","beats","beatsPerBar","initialState","loopsInUse","activeMidiTrack","loopStartTime","loopDuration","midiCounter","midiTracks","Array","keys","muted","timeline","getMidiTracks","quantizationMidi","secondsPerBeat","samples","Object","reduce","s","n","offset","forEach","sample","existingHits","push","sampleName","left","audioCtx","getAudioCtx","AudioContext","latencyHint","recordRawInputStream","stream","endTime","recorder","MediaRecorder","Promise","resolve","ondataavailable","evt","currentTime","stop","then","d","arrayBuffer","err","decodeAudioData","result","sumAudio","sum","abs","runLatencyTest","a","osc","createOscillator","frequency","value","destination","cTime","recordedBufferP","recordedBufferRes","recordedBuffer","sampleRate","recordingOffset","firstSecondOfAudio","slice","averageAudioValue","referenceDecibel","log10","threshold","pow","latency","i","localStorage","setItem","playing","metronome","gain","mediaStream","inputDeviceList","midiDeviceList","activeInputDevice","togglePlayA","toggleMetronomeA","setTempoA","setTempo","setGainA","setGain","setInputDevicesA","devices","setInputDevices","setMidiDevicesA","setMidiDevices","setMediaStreamA","setMediaStream","setLoopLengthA","useEffect","deviceId","navigator","mediaDevices","getUserMedia","audio","AUDIO_CONFIG","echoCancellation","noiseSuppression","autoGainControl","initDevices","midi","midiIn","inputs","values","input","next","done","requestMIDIAccess","addEventListener","target","console","log","enumerateDevices","res","deviceOpts","acc","dev","kind","label","midiDeviceOpts","theme","onChange","play","Comp","min","max","options","isClient","getSize","useCallback","innerWidth","undefined","innerHeight","useState","windowSize","setWindowSize","handleResize","removeEventListener","useWindowSize","gridWidth","loopWith","isTestingLatency","setIsTestingLatency","onRunLatencyTest","getItem","DndProvider","backend","Backend","activeBeat","MidiPanel","href","gridElems","recordingMidi","quantizationBeats","activeMidiDevice","combineReducers","action","triggerTime","engine","secondsIntoLoop","timesliceInTrack","createdAt","Date","now","other","oldest","indexOfOldest","indexOf","indexOfOldestUnused","gridItem","audioScheduler","store","nextNoteTime","nextBeat","frame","getState","source","createBufferSource","gainNode","createGain","setValueAtTime","triggerLoopsAtBeat","tracks","quantization","nextBeatTime","times","loopNum","t","tShifted","parseFloat","tShiftedNext","time","ctx","engines","offsetAsFraction","tQuantized","trigger","triggerMidi","recordingLength","LATENCY_MS","outputAudioBuffer","createBuffer","inB","outB","recordInputStream","b","triggerMetronome","setTimeout","setLoopStartTime","clearTimeout","visualScheduler","nextGridChangeTime","nextGridBeat","prevBeat","classList","remove","add","requestAnimationFrame","elem","cancelAnimationFrame","Kick","setTone","tone","setVolume","vol","volume","setFXAmount","amount","fxAmount","this","decay","hasSetup","x","k","curve","Float32Array","deg","PI","distortion","createWaveShaper","makeDistortionCurve","setup","linearRampToValueAtTime","exponentialRampToValueAtTime","Snare","noise","noiseBuffer","noiseFilter","createBiquadFilter","noiseEnvelope","oscEnvelope","bufferSize","output","random","HiHat","ratios","bndPass","Q","hipass","panner","createStereoPanner","pan","cos","ratio","Clap","envelope","pulseWidth","feedback","echo","createDelay","Cymbal","KEY_TO_NOTE","NOTE_TO_KEY","number2key","midiListener","listeningTo","kick","hihat","snare","clap","msg","cmd","note","velocity","DRUMS","C2","Db2","D2","E2","triggerNote","listen","schedule","recordMidiNote","newAction","C1","D1","E1","F1","Eb2","actionResult","Boolean","location","hostname","match","ReactDOM","render","StrictMode","createStore","rootReducer","applyMiddleware","configureStore","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f71ae6fe.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"draw\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"68a85f8416c7075e19df.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"sliceBuffer\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"0936f4e41e22ec92ee4e.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","//\n// Use offscreen canvas and web worker to do the canvas rendering on a\n// worker thread\n//\n// http://shimi.io/blog/offscreen-canvas-react-three-js-web-workers\n//\nimport React, { useRef, useLayoutEffect, memo } from \"react\";\n\n/* eslint import/no-webpack-loader-syntax: off */\nimport Worker from \"workerize-loader!./Waveform.worker\";\n\nconst Waveform = (props = {}) => {\n  const {\n    buffer = null,\n    width = 500,\n    height = 100,\n    zoom = 1,\n    color = \"black\",\n    onDone = null,\n    pixelRatio = window.devicePixelRatio,\n  } = props;\n\n  const canvas = useRef(null);\n  const worker = new Worker();\n\n  useLayoutEffect(() => {\n    const w = width * zoom;\n    const middle = height / 2.0;\n\n    const data = buffer.getChannelData(0);\n    const step = Math.ceil(data.length / w);\n\n    // Creating an OffscreenCanvas element.\n    // Rendering changes in this object will be reflected\n    // and displayed on the original canvas.\n    const offscreenCanvas = canvas.current.transferControlToOffscreen();\n\n    // worker.postMessage is a method which\n    // sends a message to the worker's inner scope.\n    worker.postMessage(\n      {\n        type: \"waveform-render\",\n        payload: {\n          canvas: offscreenCanvas,\n          width,\n          step,\n          middle,\n          data,\n          fillStyle: color,\n        },\n      },\n      [offscreenCanvas]\n    );\n\n    if (onDone) {\n      // worker.onmessage event will be invoked by the worker\n      // whenever the rendering process is done.\n      worker.onmessage = (event) => {\n        if (event.data.type === \"waveform-rendered\") {\n          onDone();\n        }\n      };\n      onDone();\n    }\n  });\n\n  const dw = Math.floor(pixelRatio * width * zoom);\n  const dh = Math.floor(pixelRatio * height);\n  const style = { width: width * zoom, height };\n  return <canvas ref={canvas} width={dw} height={dh} style={style} />;\n};\n\n// Use the loop ID equality as a proxy for the buffer equality\nexport default memo(\n  (props) => <Waveform {...props} />,\n  (prevProps, nextProps) =>\n    prevProps.id === nextProps.id &&\n    prevProps.width === nextProps.width &&\n    prevProps.height === nextProps.height &&\n    prevProps.color === nextProps.color\n);\n","import { v4 as uuidv4 } from \"uuid\";\nimport randomColor from \"randomcolor\";\nexport const CREATE_LOOP = \"@GRID/CREATE_LOOP\";\nexport const RECORD_MIDI_NOTE = \"@GRID/RECORD_MIDI_NOTE\";\nexport const SET_LOOP_START_TIME = \"@GRID/SET_LOOP_START_TIME\";\n\nexport const createLoop = (buffer) => ({\n  type: CREATE_LOOP,\n  payload: {\n    buffer,\n    color: randomColor(),\n    id: uuidv4(),\n  },\n});\n\nexport const setLoopStartTime = (loopStartTime, loopDuration) => ({\n  type: SET_LOOP_START_TIME,\n  payload: {\n    loopStartTime,\n    loopDuration\n  },\n});\n\nexport const recordMidiNote = (engine, triggerTime) => ({\n  type: RECORD_MIDI_NOTE,\n  payload: {\n    engine,\n    triggerTime,\n  },\n});\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const TOGGLE_PLAY = '@GRID/TOGGLE_PLAY';\nexport const TOGGLE_METRONOME = '@GRID/TOGGLE_METRONOME';\nexport const SET_TEMPO = '@GRID/SET_TEMPO';\nexport const SET_GAIN = '@GRID/SET_GAIN';\nexport const SET_ACTIVE_LOOP = '@GRID/SET_ACTIVE_LOOP';\nexport const SET_INPUT_DEVICES = '@GRID/SET_INPUT_DEVICES';\nexport const SET_MIDI_DEVICES = '@GRID/SET_MIDI_DEVICES';\nexport const SET_LOOP_LENGTH = '@GRID/SET_LOOP_LENGTH';\nexport const SET_MEDIA_STREAM = '@GRID/SET_MEDIA_STREAM';\nexport const SET_GRID_ELEM = '@GRID/SET_GRID_ELEM';\nexport const ADD_LOOP_INSTANCE = '@GRID/ADD_LOOP_INSTANCE';\nexport const TRIGGER_NOTE = '@GRID/TRIGGER_NOTE';\n\nexport const addLoopInstance = (beat, loopId) => ({\n  type: ADD_LOOP_INSTANCE,\n  payload: { beat, loopId, instanceId: uuidv4() }\n});\nexport const togglePlay = () => ({\n  type: TOGGLE_PLAY,\n});\nexport const toggleMetronome = () => ({\n  type: TOGGLE_METRONOME,\n});\nexport const setActiveLoop = (loopId) => ({\n  type: SET_ACTIVE_LOOP,\n  payload: { loopId }\n});\nexport const setLoopLength = (loopLength) => ({\n  type: SET_LOOP_LENGTH,\n  payload: { loopLength }\n});\nexport const setGain = (gain) => ({\n  type: SET_GAIN,\n  payload: { gain }\n});\nexport const setInputDevices = (devices) => ({\n  type: SET_INPUT_DEVICES,\n  payload: { devices }\n});\nexport const setMidiDevices = (devices) => ({\n  type: SET_MIDI_DEVICES,\n  payload: { devices }\n});\nexport const setMediaStream = (stream) => ({\n  type: SET_MEDIA_STREAM,\n  payload: { stream }\n});\nexport const setTempo = (tempo) => ({\n  type: SET_TEMPO,\n  payload: { tempo }\n});\nexport const setGridElem = (index, domElem) => ({\n  type: SET_GRID_ELEM,\n  payload: { index, domElem }\n});\nexport const triggerNote = (note, velocity, triggerTime, loopStartTime) => ({\n  type: TRIGGER_NOTE,\n  payload: { note, velocity, triggerTime, loopStartTime }\n});\n","import React, { useEffect } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { connect } from \"react-redux\";\n\nimport Waveform from \"./Waveform\";\n\nimport { createLoop } from \"../actions/loop\";\nimport { setActiveLoop } from \"../actions/grid\";\n\n// var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n// function getData() {\n//   const request = new XMLHttpRequest();\n//   request.open(\"GET\", \"Amen-break.mp3\", true);\n//   request.responseType = \"arraybuffer\";\n//\n//   return new Promise((resolve, reject) => {\n//     request.onload = function () {\n//       const audioData = request.response;\n//\n//       audioCtx.decodeAudioData(\n//         audioData,\n//         function (buffer) {\n//           resolve(buffer);\n//         },\n//         function (e) {\n//           reject(\"Error with decoding audio data\" + e.err);\n//         }\n//       );\n//     };\n//\n//     request.send();\n//   });\n// }\n\nfunction Loop({\n  id,\n  index,\n  length,\n  active,\n  color,\n  buffer,\n  width,\n  height,\n  tempo,\n  setActiveLoopA,\n}) {\n  const beatDuration = 60.0 / tempo;\n  const lengthInBeats = Math.round(buffer.duration / beatDuration);\n\n  // Allow loops to be dragged onto the grid\n  const [{ opacity }, drag] = useDrag({\n    item: { id, type: 'LOOP' },\n  });\n\n  return (\n    <div\n      ref={drag}\n      className={`Loop ${active ? \"active\" : \"\"}`}\n      style={{ opacity, height, width, paddingTop: 20 }}\n      onClick={() => setActiveLoopA(id)}\n    >\n      <Waveform\n        id={id}\n        width={width}\n        height={height - 20}\n        color={color}\n        buffer={buffer}\n      />\n      <div>Loop {index} {'//'} {lengthInBeats} beats</div>\n    </div>\n  );\n}\n\nfunction LoopPanel({ loops, width, tempo, activeLoop, createLoopA, setActiveLoopA }) {\n  const height = 75;\n\n  // useEffect(() => {\n  //   getData().then((buffer) => createLoopA(buffer));\n  // }, [createLoopA]);\n\n  return (\n    <div className=\"LoopPanel\" style={{ width }}>\n      {loops.map((l, index) => (\n        <Loop\n          key={l.id}\n          index={index}\n          setActiveLoopA={setActiveLoopA}\n          active={activeLoop === l.id}\n          {...l}\n          tempo={tempo}\n          width={width - 20}\n          height={height}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loops: state.loop.loops,\n  activeLoop: state.grid.activeLoop,\n  tempo: state.grid.tempo,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  createLoopA: (buffer) => dispatch(createLoop(buffer)),\n  setActiveLoopA: (loopId) => dispatch(setActiveLoop(loopId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoopPanel);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useDrop } from \"react-dnd\";\n\nimport { setGridElem, addLoopInstance } from \"../actions/grid\";\n\nfunction GridLoopMarker({ id, color, soft, numMarkers }) {\n  const opacity = soft ? 0.3 : 1;\n  return (\n    <div\n      className={`GridLoopMarker ${numMarkers > 4 ? 'half' : ''}`}\n      style={{ backgroundColor: color, opacity }}\n    />\n  );\n}\n\nfunction Grid({\n  beat,\n  barBeat,\n  loopTriggers,\n  loopTails,\n  activeLoop,\n  setGridElemA,\n  addLoopInstanceA,\n  onClick,\n}) {\n\n  // Add loop instances when they are dragged onto the grid\n  const drop = useDrop({\n    accept: ['LOOP'],\n    drop: (item) => addLoopInstanceA(beat, item.id)\n  })[1];\n\n  const numMarkers = loopTriggers.length + loopTails.length;\n\n  // Save a ref (into redux) so the scheduler can manipule the \"active\" class to\n  // animate the sequencer\n  return (\n    <div\n      ref={(ref) => {\n        setGridElemA(beat, ref);\n        drop(ref);\n      }}\n      className=\"Grid\"\n      onClick={onClick}\n    >\n      {loopTriggers.map((l) => (\n        <GridLoopMarker key={l.instanceId} {...l} numMarkers={numMarkers} />\n      ))}\n      {loopTails.map((l) => (\n        <GridLoopMarker key={l.instanceId} {...l} soft={true} numMarkers={numMarkers} />\n      ))}\n    </div>\n  );\n}\n\nfunction GridPanel({\n  activeLoop,\n  width,\n  grid,\n  beats,\n  beatsPerBar,\n  setGridElemA,\n  addLoopInstanceA,\n}) {\n  return (\n    <div className=\"GridPanel\" style={{ width, height: width }}>\n      {grid.map((g) => (\n        <Grid\n          key={g.beat}\n          {...g}\n          setGridElemA={setGridElemA}\n          addLoopInstanceA={addLoopInstanceA}\n          onClick={() => activeLoop && addLoopInstanceA(g.beat, activeLoop)}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst inRange = (start, end, val) => val >= start && val <= end;\n\nconst mapStateToProps = (state) => {\n  const tempo = state.grid.tempo;\n\n  const activeLoops = state.grid.grid\n    .map((g) =>\n      g.loopTriggers.map(({ id, instanceId }) => {\n        const originLoop = state.loop.loops.find((l) => l.id === id);\n        const beatDuration = 60.0 / tempo;\n        const lengthInBeats = Math.round(originLoop.buffer.duration / beatDuration);\n\n        const range = [\n          g.beat,\n          (g.beat + lengthInBeats - 1) % state.grid.grid.length,\n        ];\n\n        return {\n          range,\n          instanceId,\n          ...originLoop,\n        };\n      })\n    )\n    .flat();\n\n  const grid = state.grid.grid.map((g) => {\n    const loopTriggers = activeLoops.filter((l) => l.range[0] === g.beat);\n    const loopTails = activeLoops.filter((l) =>\n      inRange(l.range[0] + 1, l.range[1], g.beat) ||\n      (l.range[0] > l.range[1] && g.beat > l.range[0]) ||\n      (l.range[0] > l.range[1] && g.beat < l.range[1])\n    );\n\n    return {\n      ...g,\n      loopTriggers,\n      loopTails,\n    };\n  });\n\n  return {\n    ...state.grid,\n    grid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setGridElemA: (index, domElem) => dispatch(setGridElem(index, domElem)),\n  addLoopInstanceA: (beat, loopId) => dispatch(addLoopInstance(beat, loopId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GridPanel);\n","import { CREATE_LOOP, RECORD_MIDI_NOTE, SET_LOOP_START_TIME } from \"../actions/loop\";\nimport { ADD_LOOP_INSTANCE } from \"../actions/grid\";\n\n// Loop: {\n//   id,\n//   createdAt,\n//   buffer\n// }\n\nconst initialState = {\n  loops: [],\n  loopsInUse: [],\n\n  activeMidiTrack: 0,\n  loopStartTime: 0,\n  loopDuration: 0,\n  midiCounter: 0,\n};\n\nconst MAX_LOOPS = 3;\nconst midiTracks = [...Array(MAX_LOOPS).keys()].map(() => ({ muted: false, timeline: {} }));\n\nexport function getMidiTracks() {\n  return midiTracks;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case RECORD_MIDI_NOTE: {\n      const { triggerTime, engine } = action.payload;\n      const { timeline } = midiTracks[state.activeMidiTrack];\n\n      // Determine the offset from the start of the loop it was recorded in. This allows us\n      // to replay it at the right time in subsequent loops and quantize it\n      const secondsIntoLoop = (triggerTime - state.loopStartTime) % state.loopDuration;\n\n      const timesliceInTrack = timeline[secondsIntoLoop] || [];\n      timesliceInTrack.push(engine);\n      timeline[secondsIntoLoop] = timesliceInTrack;\n      \n      // Don't actually change the redux state\n      return {\n        ...state,\n        midiCounter: state.midiCounter + 1, // Trigger an update to the midi UI elem\n      }\n    }\n\n    case SET_LOOP_START_TIME: {\n      return {\n        ...state,\n        loopStartTime: action.payload.loopStartTime,\n        loopDuration: action.payload.loopDuration,\n      }\n    }\n\n    case CREATE_LOOP: {\n      let loops = [...state.loops];\n\n      const createdAt = Date.now();\n      if (loops.length < MAX_LOOPS) {\n        loops = [...loops, { ...action.payload, createdAt }];\n        return {\n          ...state,\n          loops,\n        };\n      }\n\n      //\n      // We want the following properties:\n      //\n      //  - index of each loop remains stable\n      //  - list of loops is bounded (for screen space and memory reasons)\n      //  - the oldest loop is the one removed first\n      //  - loops used on the grid cant be removed\n      //\n      const [oldestUnused, indexOfOldestUnused] = loops.reduce(\n        ([oldest, indexOfOldest], other, index) => {\n          // Early return if the loop is used on the grid\n          const inUse = state.loopsInUse.indexOf(other.id) > -1;\n          if (inUse) {\n            return [oldest, indexOfOldest];\n          }\n\n          // If there is no other candidate, return the loop\n          if (oldest === null) {\n            return [other, index];\n          }\n\n          // If oldest is newer than the candidate, return the candidate\n          if (oldest.createdAt > other.createdAt) {\n            return [other, index];\n          }\n\n          return [oldest, indexOfOldest];\n        },\n        [null, -1]\n      );\n\n      if (indexOfOldestUnused > -1) {\n        loops[indexOfOldestUnused] = { ...action.payload, createdAt };\n      } else {\n        console.log(\"No space!\");\n        // Alert the user there is no space in the buffer somehow?\n      }\n\n      return {\n        ...state,\n        loops,\n      };\n    }\n    case ADD_LOOP_INSTANCE: {\n      return {\n        ...state,\n        loopsInUse: [...state.loopsInUse, action.payload.loopId],\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getMidiTracks } from \"../reducers/loopReducer\";\n\nfunction Midi({\n  tempo,\n  quantizationMidi,\n  beats,\n  loopDuration,\n  loopStartTime,\n  secondsPerBeat,\n  midiCounter,\n  width,\n  midiTracks,\n}) {\n  return (\n    <div className=\"MidiPanel\" style={{ width }}>\n      {midiTracks.map(({ muted, timeline }) => {\n        const samples = Object.keys(timeline).reduce((s, n) => {\n          const offset = (n / loopDuration) * 100;\n          timeline[n].forEach((sample) => {\n            const existingHits = s[sample.name] || [];\n            existingHits.push(offset);\n            s[sample.name] = existingHits;\n          });\n          return s;\n        }, {});\n\n        return (\n          <div className=\"MidiTrack\">\n            {Object.keys(samples).map((sampleName) => {\n              return (\n                <div className=\"MidiSample\">\n                  <span style={{ width: \"20%\" }}>{sampleName}</span>\n                  {samples[sampleName].map((offset) => (\n                    <span\n                      className=\"MidiNote\"\n                      style={{\n                        left: `${offset * 0.8 + 20}%`,\n                      }}\n                    />\n                  ))}\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  const { tempo, quantizationMidi, beats } = state.grid;\n  const { loopDuration, loopStartTime, midiCounter } = state.loop;\n  const secondsPerBeat = 60.0 / tempo;\n\n  const midiTracks = getMidiTracks();\n\n  return {\n    tempo,\n    quantizationMidi,\n    beats,\n    loopDuration,\n    loopStartTime,\n    secondsPerBeat,\n    midiCounter,\n    midiTracks,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Midi);\n","/* eslint import/no-webpack-loader-syntax: off */\nimport worker from \"workerize-loader!./worker\";\nconst workerInstance = new worker();\n\nconst SCHEDULE_AHEAD_TIME = 0.1;\nconst BLIP_LENGTH = 0.01;\n\n//\n// Global value set by the latency test.\n//\nlet audioCtx = null;\nexport function getAudioCtx() {\n  if (audioCtx) return audioCtx;\n\n  audioCtx = new AudioContext({ latencyHint: 0 });\n  return audioCtx;\n}\n\nexport function getDeviceStream(deviceId) {\n  const AUDIO_CONFIG = {\n    echoCancellation: false,\n    noiseSuppression: false,\n    autoGainControl: false,\n    latency: 0,\n  };\n  return navigator.mediaDevices.getUserMedia({\n    audio: { AUDIO_CONFIG, deviceId },\n  });\n}\n\nexport function triggerMidi(\n  tracks,\n  beats,\n  secondsPerBeat,\n  quantization,\n  nextBeat,\n  nextBeatTime,\n  loopDuration,\n  loopStartTime\n) {\n  for (let i = 0; i < tracks.length; i++) {\n    const { muted, timeline } = tracks[i];\n\n    const times = Object.keys(timeline);\n    if (muted || times.length === 0) {\n      continue;\n    }\n\n    const loopNum = Math.floor((nextBeatTime - loopStartTime) / loopDuration);\n    // console.log(loopNum, loopDuration);\n\n    times\n      .filter((t) => {\n        // Shift the trigger time to the current audio context time (relative to the\n        // start of the loop)\n        const tShifted = parseFloat(t) + loopStartTime + loopDuration * loopNum;\n\n        const tShiftedNext = parseFloat(t) + loopStartTime + loopDuration * (loopNum + 1);\n\n        // Schedule notes 1 beat ahead\n        const thisLoop = (\n          tShifted > nextBeatTime + secondsPerBeat &&\n          tShifted <= nextBeatTime + secondsPerBeat * 2\n        );\n\n        const nextLoop = (\n          tShiftedNext > nextBeatTime + secondsPerBeat &&\n          tShiftedNext <= nextBeatTime + secondsPerBeat * 2\n        );\n\n        return thisLoop || nextLoop;\n      })\n      .forEach((time) => {\n        const ctx = getAudioCtx();\n        // Preconfigured sounds to play\n        const engines = timeline[time];\n\n        // Shift the time to be relative to this loop\n        const tShifted = parseFloat(time) + loopStartTime + loopDuration * loopNum;\n\n        // Quantize the notes so they are in time with the click\n        //\n        // TODO: Generalise to be configurable to different quantization settings\n        const offsetFromBeat = (nextBeatTime + secondsPerBeat) - tShifted;\n        const offsetAsFraction = offsetFromBeat / secondsPerBeat;\n        let tQuantized = nextBeatTime + secondsPerBeat;\n        if (offsetAsFraction < 0.125) {\n        } else if (offsetAsFraction < (3/8)) {\n          tQuantized += 0.25 * secondsPerBeat;\n        } else if (offsetAsFraction < (5/8)) {\n          tQuantized += 0.5 * secondsPerBeat;\n        } else if (offsetAsFraction < (7/8)) {\n          tQuantized += 0.75 * secondsPerBeat;\n        } else {\n          tQuantized += 1 * secondsPerBeat;\n        }\n\n        engines.forEach((engine) => {\n          const instance = new engine(ctx);\n          instance.trigger(tQuantized);\n        });\n      });\n  }\n}\n\nexport function triggerMetronome(\n  audioCtx,\n  b,\n  nextBeatTime,\n  beats,\n  beatsPerBar\n) {\n  const osc = audioCtx.createOscillator();\n  osc.connect(audioCtx.destination);\n\n  if (b % beats === 0) {\n    osc.frequency.value = 880.0;\n  } else if (b % beatsPerBar === 0) {\n    osc.frequency.value = 440.0;\n  } else {\n    osc.frequency.value = 220.0;\n  }\n\n  osc.start(nextBeatTime);\n  osc.stop(nextBeatTime + BLIP_LENGTH);\n}\n\nexport function triggerLoopsAtBeat(\n  grid,\n  loops,\n  nextBeat,\n  beats,\n  audioCtx,\n  gain,\n  nextNoteTime\n) {\n  const { loopTriggers } = grid[nextBeat % beats];\n\n  loopTriggers\n    .map(({ id }) => loops.find((l) => l.id === id))\n    .forEach(({ buffer }) => {\n      const source = audioCtx.createBufferSource();\n\n      // set the buffer in the AudioBufferSourceNode\n      source.buffer = buffer;\n\n      // TODO: Find a better place to apply global gain\n      // start the source playing\n      const gainNode = audioCtx.createGain();\n      gainNode.gain.setValueAtTime(gain, audioCtx.currentTime);\n      source.connect(gainNode).connect(audioCtx.destination);\n      source.start(nextNoteTime);\n    });\n}\n\nfunction recordRawInputStream(stream, audioCtx, duration) {\n  const recorder = new MediaRecorder(stream);\n  recorder.start(duration * 1000);\n  let endTime;\n  return new Promise(\n    (resolve) =>\n      (recorder.ondataavailable = (evt) => {\n        endTime = audioCtx.currentTime;\n\n        if (recorder.state === \"recording\") {\n          recorder.stop();\n        }\n        resolve(evt.data);\n      })\n  )\n    .then((d) => d.arrayBuffer())\n    .then(\n      (d) =>\n        new Promise((resolve, err) =>\n          audioCtx.decodeAudioData(\n            d,\n            (result) => resolve([result, endTime]),\n            err\n          )\n        )\n    );\n}\n\nexport function recordInputStream(stream, audioCtx, start, end) {\n  // This should record the full loop with a small gap at the start and end\n  const secondsUntilEnd = end - audioCtx.currentTime;\n  const recordingLength = secondsUntilEnd + 2 * SCHEDULE_AHEAD_TIME;\n  const LATENCY_MS = window.localStorage.getItem(\"Knotted-Latency\");\n\n  return recordRawInputStream(stream, audioCtx, recordingLength).then(\n    async ([d, endTime]) => {\n      // Calculate the difference in requested and recorded durations\n      // const durOffset = d.duration - recordingLength;\n      // const durOffset = -0.180;\n      // console.log(durOffset);\n\n      const sampleRate = d.sampleRate;\n      const outputAudioBuffer = audioCtx.createBuffer(\n        1,\n        (end - start) * sampleRate,\n        sampleRate\n      );\n\n      const inB = d.getChannelData(0);\n      const outB = outputAudioBuffer.getChannelData(0);\n      for (let t = 0; t < (end - start) * sampleRate; t++) {\n        outB[t] = inB[t + Math.floor((LATENCY_MS * sampleRate) / 1000)];\n      }\n\n      // Offset the recording by the global system latency value\n      // Do the processing in a web-worker to avoid locking the event loop\n      // const outB = await workerInstance.sliceBuffer(\n      //   inB,\n      //   end - start,\n      //   sampleRate,\n      //   LATENCY_MS\n      // );\n      // outputAudioBuffer.copyFromChannel(outB, 0);\n\n      return outputAudioBuffer;\n    }\n  );\n}\n\nfunction sumAudio(buffer) {\n  return buffer.reduce((sum, sample) => sum + Math.abs(sample), 0);\n}\n\n/**\n * Play a sine wave and record the delay in hearing it\n *\n * Adapted from:\n *\n *   https://github.com/superpoweredSDK/WebBrowserAudioLatencyMeasurement\n */\nexport async function runLatencyTest(stream) {\n  const audioCtx = getAudioCtx();\n  const osc = audioCtx.createOscillator();\n  osc.frequency.value = 440.0;\n  osc.connect(audioCtx.destination);\n\n  const cTime = audioCtx.currentTime;\n\n  // Sequence of events:\n  //\n  //  - 2 seconds of silence (cTime + 2)\n  //  - 1 second of 440hz sine wave (cTime + 3)\n  //  - finish recording and sine wave (cTime + 4)\n  const recordedBufferP = recordRawInputStream(stream, audioCtx, 4);\n  osc.start(cTime + 2);\n  osc.stop(cTime + 3);\n\n  // Wait for the recording to finish\n  const [recordedBufferRes, endTime] = await recordedBufferP;\n  const recordedBuffer = recordedBufferRes.getChannelData(0);\n\n  // Now we have a buffer with roughly 1 second of sound louder than the rest. We\n  // want to isolate that and determine its timestamp then compare that to when it\n  // should have been recorded (cTime + 2 -> cTime + 3). The difference will be the\n  // recording latency\n\n  const { sampleRate } = recordedBufferRes;\n  // The recording takes a small amount of time to start, so the timing in the buffer\n  // is shifted slightly later. I'm still not sure how to apply this. We will need to\n  // account for this in our loop slicing somehow.\n  const recordingOffset = (endTime - 4) * 1000;\n\n  // Calculate the baseline audio amplitude during the \"silence period\", then\n  // take an audio energy rise of 24 decibels to be the threshold for identifying\n  // the start of the oscillator starting\n  const firstSecondOfAudio = recordedBuffer.slice(0, sampleRate);\n  const averageAudioValue = sumAudio(firstSecondOfAudio) / sampleRate;\n  const referenceDecibel = 20.0 * Math.log10(averageAudioValue) + 24.0;\n  const threshold = Math.pow(10.0, referenceDecibel / 20.0);\n\n  let latency = null;\n  // Look from (cTime + 1) to (cTime + 4) for the start of the oscillator pulse\n  for (let i = sampleRate; i < sampleRate * 4; i++) {\n    if (recordedBuffer[i] > Math.abs(threshold)) {\n      latency = Math.round(Math.abs(2000 - (i * 1000) / sampleRate));\n      break;\n    }\n  }\n\n  window.localStorage.setItem(\"Knotted-Latency\", latency);\n  window.localStorage.setItem(\"Knotted-RecordingOffset\", recordingOffset);\n\n  return latency;\n}\n\nexport async function loadSound(ctx, url) {\n  const response = await fetch(url);\n  const rawBuffer = await response.arrayBuffer();\n  return await ctx.decodeAudioData(rawBuffer);\n}\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport ReactControlPanel, {\n  Select,\n  Range,\n  Checkbox,\n  Custom,\n} from \"react-control-panel\";\n\nimport {\n  setTempo,\n  togglePlay,\n  toggleMetronome,\n  setLoopLength,\n  setGain,\n  setInputDevices,\n  setMediaStream,\n  setMidiDevices,\n} from \"../actions/grid\";\nimport { getDeviceStream } from \"../audioUtils\";\n\nfunction Controls({\n  playing,\n  loopLength,\n  gain,\n  width,\n  tempo,\n  metronome,\n  mediaStream,\n  midiDeviceList,\n  activeInputDevice,\n  inputDeviceList,\n\n  togglePlayA,\n  setGainA,\n  setTempoA,\n  toggleMetronomeA,\n  setInputDevicesA,\n  setMidiDevicesA,\n  setMediaStreamA,\n  setLoopLengthA,\n}) {\n  //\n  // Get permission to access input audio stream\n  //\n  useEffect(() => {\n    getDeviceStream(activeInputDevice)\n      .then((stream) => setMediaStreamA(stream));\n  }, [setMediaStreamA, activeInputDevice]);\n\n  useEffect(() => {\n    // https://glitch.com/~webmidi-examples\n    // Reset.\n    function initDevices(midi) {\n      const midiIn = [];\n      const inputs = midi.inputs.values();\n      for (\n        let input = inputs.next();\n        input && !input.done;\n        input = inputs.next()\n      ) {\n        midiIn.push(input.value);\n      }\n\n      setMidiDevicesA(midiIn);\n    }\n\n    navigator.requestMIDIAccess().then(\n      (midi) => {\n        // Also react to device changes.\n        midi.addEventListener(\"statechange\", (event) =>\n          initDevices(event.target)\n        );\n        initDevices(midi);\n      },\n      (err) => console.log(\"Something went wrong\", err)\n    );\n  }, [setMidiDevicesA]);\n\n  // When we have permission to access the WebAudio API, get the list of connected devices\n  useEffect(() => {\n    if (mediaStream) {\n      navigator.mediaDevices\n        .enumerateDevices()\n        .then((res) => setInputDevicesA(res));\n    }\n  }, [mediaStream, setInputDevicesA]);\n\n  const deviceOpts = inputDeviceList.reduce((acc, dev) => {\n    if (dev.kind === \"audioinput\") {\n      acc[dev.label] = dev.deviceId;\n    }\n    return acc;\n  }, {});\n\n  const midiDeviceOpts = midiDeviceList.reduce((acc, dev) => {\n    if (dev.type === \"input\") {\n      acc[dev.name] = dev.id;\n    }\n    return acc;\n  }, {});\n\n  return (\n    <ReactControlPanel\n      theme=\"light\"\n      width={width * 0.6}\n      onChange={(key, val) => {\n        if (key === \"tempo\") {\n          setTempoA(val);\n        }\n        if (key === \"metronome\") {\n          toggleMetronomeA();\n        }\n        if (key === \"gain\") {\n          setGainA(val);\n        }\n        if (key === \"loop length\") {\n          if (val !== 12) {\n            setLoopLengthA(val);\n          }\n        }\n        if (key === \"play\") {\n          togglePlayA();\n        }\n      }}\n      state={{\n        latency: false,\n        tempo,\n        gain,\n        metronome,\n        \"loop length\": loopLength,\n        play: playing,\n      }}\n    >\n      <Custom label=\"play\" Comp={({ value, onChange }) =>\n          <button className={`PlayButton ${value ? 'pause' : ''}`} onClick={togglePlayA} />\n       } />\n      <Checkbox label=\"metronome\" />\n\n      <Range label=\"loop length\" min={4} max={16} step={4} />\n      <Range label=\"tempo\" min={40} max={260} step={1} />\n      <Range label=\"gain\" min={0} max={1} />\n\n      <Select label=\"input\" options={deviceOpts} />\n      <Select label=\"inputmidi\" options={midiDeviceOpts} />\n\n    </ReactControlPanel>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  togglePlayA: () => dispatch(togglePlay()),\n  toggleMetronomeA: () => dispatch(toggleMetronome()),\n  setTempoA: (tempo) => dispatch(setTempo(tempo)),\n  setGainA: (gain) => dispatch(setGain(gain)),\n  setInputDevicesA: (devices) => dispatch(setInputDevices(devices)),\n  setMidiDevicesA: (devices) => dispatch(setMidiDevices(devices)),\n  setMediaStreamA: (stream) => dispatch(setMediaStream(stream)),\n  setLoopLengthA: (loopLength) => dispatch(setLoopLength(loopLength)),\n});\nconst mapStateToProps = (state) => ({\n  playing: state.grid.playing,\n  tempo: state.grid.tempo,\n  metronome: state.grid.metronome,\n  gain: state.grid.gain,\n  loopLength: state.grid.loopLength,\n  mediaStream: state.grid.mediaStream,\n  inputDeviceList: state.grid.inputDeviceList,\n  midiDeviceList: state.grid.midiDeviceList,\n  activeInputDevice: state.grid.activeInputDevice,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\n\nimport LoopPanel from \"./components/LoopPanel\";\nimport GridPanel from \"./components/GridPanel\";\nimport MidiPanel from \"./components/MidiPanel\";\nimport Controls from \"./components/Controls\";\nimport \"./App.css\";\n\nimport { togglePlay } from \"./actions/grid\";\nimport { runLatencyTest } from \"./audioUtils\";\n\nfunction useWindowSize() {\n  const isClient = typeof window === \"object\";\n\n  const getSize = useCallback(() => {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    };\n  }, [isClient]);\n\n  const [windowSize, setWindowSize] = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [getSize, isClient]);\n\n  return windowSize;\n}\n\nfunction App({ playing, mediaStream, togglePlayA }) {\n  const { width, height } = useWindowSize();\n\n  const gridWidth = Math.min(0.35 * width, height - 120);\n  const loopWith = (width - gridWidth) * 0.5;\n\n  const [isTestingLatency, setIsTestingLatency] = useState(false);\n\n  const onRunLatencyTest = async () => {\n    if (playing) {\n      togglePlayA();\n    }\n    setIsTestingLatency(true);\n    await runLatencyTest(mediaStream);\n    setIsTestingLatency(false);\n  };\n\n  const latency = window.localStorage.getItem('Knotted-Latency');\n  return (\n    <div className=\"Wrapper\">\n      {isTestingLatency ? null : (\n        <header className=\"Controls\">\n          <h2>Knotted.live</h2>\n          <div>\n            <Controls width={Math.min(width, 650)} />\n          </div>\n          <button className=\"MainButton\" onClick={onRunLatencyTest}>Configure Latency ({latency} ms)</button>\n        </header>\n      )}\n      <div className=\"App\">\n        {isTestingLatency ? (\n          <h2>Testing... Please wait</h2>\n        ) : (\n          <DndProvider backend={Backend}>\n            <GridPanel width={gridWidth} activeBeat={0} />\n            <LoopPanel width={loopWith} />\n            <MidiPanel width={loopWith} />\n          </DndProvider>\n        )}\n      </div>\n      <footer>\n        By <a href=\"https://jtfell.com\">jtfell</a>\n      </footer>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  togglePlayA: () => dispatch(togglePlay()),\n});\nconst mapStateToProps = (state) => ({\n  playing: state.grid.playing,\n  mediaStream: state.grid.mediaStream,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  TOGGLE_PLAY,\n  TOGGLE_METRONOME,\n  SET_ACTIVE_LOOP,\n  SET_GAIN,\n  SET_TEMPO,\n  SET_LOOP_LENGTH,\n  SET_INPUT_DEVICES,\n  SET_MIDI_DEVICES,\n  SET_MEDIA_STREAM,\n  SET_GRID_ELEM,\n  ADD_LOOP_INSTANCE,\n} from \"../actions/grid\";\n\nwindow.gridElems = [];\n\nconst initialState = {\n  beatsPerBar: 4,\n  beats: 16,\n  playing: false,\n  recordingMidi: true,\n  metronome: true,\n  tempo: 136.55,\n  loopLength: 8,\n  quantizationBeats: 4,\n  quantizationMidi: 0.25, // quarter note\n  gain: 0.2,\n\n  // The highlighted loop that will be added to the grid when its clicked\n  activeLoop: null,\n\n  activeMidiDevice: null,\n  midiDeviceList: [],\n\n  activeInputDevice: null,\n  inputDeviceList: [],\n  mediaStream: null,\n\n  grid: generateGrid(16, 4),\n};\n\n// TODO: Seemless switching betweeen resolutions - different state per view\n\nfunction generateGrid(beats, beatsPerBar) {\n  return [...Array(beats).keys()].map((beat) => {\n    const barBeat = (beat + 1) % beatsPerBar;\n\n    return {\n      beat: beat + 1,\n      barBeat,\n      loopTriggers: [],\n    };\n  });\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_GRID_ELEM:\n      // Mutate in place as these are opaque refs\n      window.gridElems[action.payload.index - 1] = action.payload.domElem;\n      return state;\n    case ADD_LOOP_INSTANCE:\n      const grid = [...state.grid];\n      const gridItem = grid[action.payload.beat - 1];\n      gridItem.loopTriggers.push({\n        id: action.payload.loopId,\n        instanceId: action.payload.instanceId,\n      });\n\n      return {\n        ...state,\n        grid,\n      };\n    case TOGGLE_METRONOME:\n      return {\n        ...state,\n        metronome: !state.metronome,\n      };\n    case TOGGLE_PLAY:\n      return {\n        ...state,\n        playing: !state.playing,\n      };\n    case SET_ACTIVE_LOOP:\n      return {\n        ...state,\n        activeLoop: action.payload.loopId,\n      };\n    case SET_GAIN:\n      return {\n        ...state,\n        gain: action.payload.gain,\n      };\n    case SET_LOOP_LENGTH:\n      return {\n        ...state,\n        loopLength: action.payload.loopLength,\n      };\n    case SET_MIDI_DEVICES:\n      return {\n        ...state,\n        midiDeviceList: action.payload.devices,\n      };\n    case SET_INPUT_DEVICES:\n      return {\n        ...state,\n        inputDeviceList: action.payload.devices,\n      };\n    case SET_MEDIA_STREAM:\n      return {\n        ...state,\n        mediaStream: action.payload.stream,\n      };\n    case SET_TEMPO:\n      return {\n        ...state,\n        tempo: action.payload.tempo,\n      };\n    default:\n      return state;\n  }\n};\n","//\n// Middleware to convert midi events into redux actions\n//\n\nimport {\n  SET_MIDI_DEVICES,\n  toggleMetronome,\n  togglePlay,\n  setLoopLength,\n  TRIGGER_NOTE,\n  triggerNote,\n} from \"../actions/grid\";\n\nimport { recordMidiNote } from \"../actions/loop\";\n\nimport { getAudioCtx } from \"../audioUtils\";\nimport { HiHat, Snare, Kick, Clap, Cymbal } from \"../engines\";\n\n//\n// From Midi.js\n//\nconst KEY_TO_NOTE = {}; // C8  == 108\nconst NOTE_TO_KEY = {}; // 108 ==  C8\n\nconst A0 = 0x15; // first note\nconst C8 = 0x6c; // last note\nconst number2key = [\n  \"C\",\n  \"Db\",\n  \"D\",\n  \"Eb\",\n  \"E\",\n  \"F\",\n  \"Gb\",\n  \"G\",\n  \"Ab\",\n  \"A\",\n  \"Bb\",\n  \"B\",\n];\nfor (let n = A0; n <= C8; n++) {\n  const octave = ((n - 12) / 12) >> 0;\n  const name = number2key[n % 12] + octave;\n  KEY_TO_NOTE[name] = n;\n  NOTE_TO_KEY[n] = name;\n}\n\nconst NOTE_ON = 144;\n// const NOTE_OFF = 128;\n\nconst midiListener = (store) => (next) => {\n  // Listen to MIDI devices and dispatch actions when MIDI messages are received.\n  const listeningTo = [];\n  const listen = (devices, store) => {\n    for (const dev of devices) {\n      let kick;\n      let hihat;\n      let snare;\n      let clap;\n      let cymbal;\n\n      if (listeningTo.indexOf(dev.id) === -1) {\n        dev.addEventListener(\"midimessage\", (msg) => {\n          const [cmd, note, velocity] = msg.data;\n          const ctx = getAudioCtx();\n\n          if (!kick) {\n            const ctx = getAudioCtx();\n            kick = new Kick(ctx);\n            kick.setup();\n            hihat = new HiHat(ctx);\n            hihat.setup();\n            snare = new Snare(ctx);\n            snare.setup();\n            clap = new Clap(ctx);\n            clap.setup();\n            cymbal = new Cymbal(ctx);\n            cymbal.setup();\n          }\n\n          const DRUMS = {\n            C2: () => {\n              kick.trigger(ctx.currentTime);\n              kick = new Kick(ctx);\n              kick.setup();\n            },\n            Db2: () => {\n              hihat.trigger(ctx.currentTime);\n              hihat = new HiHat(ctx);\n              hihat.setup();\n            },\n            D2: () => {\n              snare.trigger(ctx.currentTime);\n              snare = new Snare(ctx);\n              snare.setup();\n            },\n            // Eb2: () => cymbal.trigger(ctx.currentTime),\n            E2: () => {\n              clap.trigger(ctx.currentTime);\n              clap = new Clap(ctx);\n              clap.setup();\n            },\n          };\n\n          if (cmd === NOTE_ON && velocity > 0) {\n            store.dispatch(triggerNote(NOTE_TO_KEY[note], velocity, ctx.currentTime));\n            const action = DRUMS[NOTE_TO_KEY[note]];\n            if (action) {\n              action();\n            }\n          }\n        });\n        listeningTo.push(dev.id);\n      }\n    }\n  };\n\n  return (action) => {\n    next(action);\n\n    if (action.type === SET_MIDI_DEVICES) {\n      listen(action.payload.devices, store);\n    }\n\n    if (action.type === TRIGGER_NOTE) {\n      const { note, triggerTime } = action.payload;\n      const { loopLength, recordingMidi, playing } = store.getState().grid;\n\n      const schedule = (engine) => {\n        if (recordingMidi && playing) {\n          return recordMidiNote(engine, triggerTime);\n        }\n      };\n\n      // TODO:\n      //\n      //  - make this configurable in the app\n      //  - show current mapping in UI\n      //\n      //  Mapping for what each key does:\n      const NOTE_MAPPING = {\n        // Loop / playback commands\n        C1: () => togglePlay(),\n        D1: () => toggleMetronome(),\n\n        E1: () => setLoopLength(loopLength / 2),\n        F1: () => setLoopLength(loopLength * 2),\n\n        // Drum samples\n        C2: () => schedule(Kick),\n        Db2: () => schedule(HiHat),\n        D2: () => schedule(Snare),\n        Eb2: () => schedule(Cymbal),\n        E2: () => schedule(Clap),\n      };\n\n      const newAction = NOTE_MAPPING[note];\n      if (newAction) {\n        const actionResult = newAction();\n        if (actionResult) {\n          store.dispatch(actionResult);\n        }\n      } else {\n        console.log(`Unmapped midi note ${note}`);\n      }\n    }\n  };\n};\n\nexport default midiListener;\n","import { combineReducers } from \"redux\";\nimport loopReducer from \"./loopReducer\";\nimport gridReducer from \"./gridReducer\";\n\nexport default combineReducers({\n  loop: loopReducer,\n  grid: gridReducer,\n});\n","//\n// Middleware that handles scheduling all the active loops to play at the correct times. It\n// reacts to changes in the redux state while maintaining a consistent beat.\n//\n\nimport { TOGGLE_PLAY } from \"../actions/grid\";\nimport { createLoop, setLoopStartTime } from \"../actions/loop\";\nimport { getMidiTracks} from \"../reducers/loopReducer\";\n\nimport { getAudioCtx, triggerMetronome, triggerMidi, triggerLoopsAtBeat, recordInputStream } from \"../audioUtils\";\n\nconst SCHEDULE_AHEAD_TIME = 0.1;\nconst TIMEOUT_DUR = 20;\n\nconst audioScheduler = (store) => (next) => {\n  let frame = null;\n  let nextNoteTime;\n  let nextBeat;\n\n  const loop = () => {\n    const audioCtx = getAudioCtx();\n    const state = store.getState();\n    const {\n      mediaStream,\n\n      quantizationMidi,\n\n      playing,\n      metronome,\n      tempo,\n      grid,\n      gain,\n      beats,\n      beatsPerBar,\n      loopLength,\n    } = state.grid;\n    const { loops, loopDuration, loopStartTime } = state.loop;\n    const secondsPerBeat = 60.0 / tempo;\n\n    try {\n      const cTime = audioCtx.currentTime;\n\n      //\n      // Manage audio triggering using a look-ahead scheduler\n      //\n      if (playing && nextNoteTime < cTime + SCHEDULE_AHEAD_TIME) {\n        // Get notes at \"nextBeat\" and schedule them to play in the webAudio audioCtx\n        triggerLoopsAtBeat(\n          grid,\n          loops,\n          nextBeat,\n          beats,\n          audioCtx,\n          gain,\n          nextNoteTime\n        );\n\n        triggerMidi(\n          getMidiTracks(),\n          beats,\n          secondsPerBeat,\n          quantizationMidi,\n          nextBeat,\n          nextNoteTime,\n          loopDuration,\n          loopStartTime\n        );\n\n        // At this point, we lock in the current state in redux as what audio will be scheduled\n        // regardless of user changes.\n        if (nextBeat % loopLength === 0) {\n          const loopStart = nextNoteTime;\n          const loopEnd = nextNoteTime + loopLength * secondsPerBeat;\n\n          // Start recording the next loop\n          recordInputStream(\n            mediaStream,\n            audioCtx,\n            loopStart,\n            loopEnd\n          ).then((d) => store.dispatch(createLoop(d)));\n        }\n\n        // Trigger metronome on each beat\n        if (metronome) {\n          triggerMetronome(\n            audioCtx,\n            nextBeat,\n            nextNoteTime,\n            beats,\n            beatsPerBar\n          );\n        }\n\n        nextBeat += 1;\n        nextBeat %= beats;\n        // Set the next target to schedule for\n        nextNoteTime += secondsPerBeat;\n      }\n    } finally {\n      frame = setTimeout(loop, TIMEOUT_DUR);\n    }\n  };\n\n  return (action) => {\n    // We need to track 2 versions of the state:\n    //\n    // 1. UI state (immediately updated on each user action)\n    // 2. Audio state (updated at the start of each quantization loop)\n\n    next(action);\n    const state = store.getState();\n    const {\n      tempo,\n      loopLength,\n    } = state.grid;\n    const secondsPerBeat = 60.0 / tempo;\n    const loopDuration = secondsPerBeat * loopLength;\n\n    // If the playing state has been toggled, start or stop the Raf loop\n    if (action.type === TOGGLE_PLAY && store.getState().grid.playing) {\n      const audioCtx = window.audioCtx || new AudioContext();\n      window.audioCtx = audioCtx;\n\n      nextBeat = 0;\n      nextNoteTime = audioCtx.currentTime + SCHEDULE_AHEAD_TIME;\n      store.dispatch(setLoopStartTime(nextNoteTime, loopDuration));\n      frame = setTimeout(loop, TIMEOUT_DUR);\n    } else if (action.type === TOGGLE_PLAY && frame) {\n      clearTimeout(frame);\n      nextBeat = 0;\n    }\n  };\n};\n\nexport default audioScheduler;\n","//\n// Middleware that manages DOM updates of the grid & loop cursors based on the beat. We avoid\n// using React's reconciler for this as it schedules updates for a later point when we want\n// to prioritise frame-level precision of which grid square is lit up\n//\n\nimport { TOGGLE_PLAY } from \"../actions/grid\";\nimport { getAudioCtx } from \"../audioUtils\";\n\nconst SCHEDULE_AHEAD_TIME = 0.1;\nconst ANIMATION_TOLERANCE = -0.05;\n\nconst visualScheduler = (store) => (next) => {\n  let frame = null;\n\n  let nextGridChangeTime;\n  let nextGridBeat;\n\n  const loop = () => {\n    const audioCtx = getAudioCtx();\n    const state = store.getState();\n    const { playing, tempo, beats } = state.grid;\n    const secondsPerBeat = 60.0 / tempo;\n\n    try {\n      const cTime = audioCtx.currentTime;\n\n      //\n      // Manage visual animations in real-time\n      //\n      if (playing && nextGridChangeTime < cTime + ANIMATION_TOLERANCE) {\n        let prevBeat = nextGridBeat - 1;\n        if (prevBeat === -1) {\n          prevBeat = beats - 1;\n        }\n\n        window.gridElems[prevBeat].classList.remove(\"active\");\n        window.gridElems[nextGridBeat].classList.add(\"active\");\n\n        nextGridBeat += 1;\n        nextGridBeat %= beats;\n        nextGridChangeTime += secondsPerBeat;\n      }\n    } finally {\n      // TODO Take into account that multiple beats can be missed before the loop will resume\n      //      as the audio scheduler will continue and we need to stay in sync with it\n      frame = requestAnimationFrame(loop);\n    }\n  };\n\n  return (action) => {\n    // We need to track 2 versions of the state:\n    //\n    // 1. UI state (immediately updated on each user action)\n    // 2. Audio state (updated at the start of each quantization loop)\n\n    next(action);\n\n    // If the playing state has been toggled, start or stop the Raf loop\n    if (action.type === TOGGLE_PLAY && store.getState().grid.playing) {\n      const audioCtx = window.audioCtx || new AudioContext();\n      window.audioCtx = audioCtx;\n\n      nextGridBeat = 0;\n      nextGridChangeTime = audioCtx.currentTime + SCHEDULE_AHEAD_TIME;\n      frame = requestAnimationFrame(loop);\n    } else if (action.type === TOGGLE_PLAY && frame) {\n      window.gridElems.forEach((elem) => elem.classList.remove(\"active\"));\n      cancelAnimationFrame(frame);\n    }\n  };\n};\n\nexport default visualScheduler;\n","export class Kick {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.tone = 167.1;\n        this.decay = 0.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n        this.hasSetup = false;\n    }\n\n    makeDistortionCurve(amount) {\n        var k = amount /4,\n            n_samples = 44100,\n            curve = new Float32Array(n_samples),\n            deg = Math.PI / 180,\n            i = 0,\n            x;\n        for (; i < n_samples; ++i) {\n            x = i * 2 / n_samples - 1;\n            curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n        }\n        return curve;\n    };\n\n    setup() {\n        this.osc = this.ctx.createOscillator();\n        this.osc.type = 'sine'\n        this.gain = this.ctx.createGain();\n        this.distortion = this.ctx.createWaveShaper();\n        this.distortion.curve = this.makeDistortionCurve(this.fxAmount);\n\n        this.osc.connect(this.gain);\n        this.gain.connect(this.distortion);\n        this.distortion.connect(this.ctx.destination);\n        this.hasSetup = true;\n    }\n\n    trigger(time) {\n        if (this.volume === 0) { return };\n        if (!this.hasSetup) {\n          this.setup();\n        }\n\n        this.osc.frequency.setValueAtTime(this.tone, time + 0.001);\n        this.gain.gain.linearRampToValueAtTime(this.volume, time + 0.1)\n\n        this.osc.frequency.exponentialRampToValueAtTime(1, time + this.decay);\n        this.gain.gain.exponentialRampToValueAtTime(0.01 * this.volume, time + this.decay);\n        this.gain.gain.linearRampToValueAtTime(0, time + this.decay + 0.1)\n\n        this.osc.start(time);\n        this.osc.stop(time + this.decay + 0.1);\n    }\n\n    setTone = (tone) => {\n        this.tone = tone;\n    }\n\n    setVolume = (vol) => {\n        this.volume = vol;\n    }\n\n    setFXAmount = (amount) => {\n        this.fxAmount = amount;\n    }\n}\n","export class Snare {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.tone = 100;\n        this.decay = 0.2;\n        this.volume = 1;\n        this.hasSetup = false;\n    }\n\n    setup() {\n        this.noise = this.ctx.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n\n        var noiseFilter = this.ctx.createBiquadFilter();\n        noiseFilter.type = 'highpass';\n        noiseFilter.frequency.value = 1000;\n        this.noise.connect(noiseFilter);\n\n        this.noiseEnvelope = this.ctx.createGain();\n        noiseFilter.connect(this.noiseEnvelope);\n\n        this.noiseEnvelope.connect(this.ctx.destination);\n\n        this.osc = this.ctx.createOscillator();\n        this.osc.type = 'triangle';\n\n        this.oscEnvelope = this.ctx.createGain();\n        this.osc.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.ctx.destination);\n        this.hasSetup = true;\n    }\n\n    noiseBuffer() {\n        var bufferSize = this.ctx.sampleRate;\n        var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return buffer;\n    }\n\n    trigger(time) {\n        if (this.volume === 0) { return };\n        if (!this.hasSetup) {\n          this.setup();\n        }\n\n        this.noiseEnvelope.gain.setValueAtTime(this.volume, time);\n        this.noiseEnvelope.gain.exponentialRampToValueAtTime(0.01, time + this.decay);\n\n        this.osc.frequency.setValueAtTime(this.tone, time);\n        this.oscEnvelope.gain.setValueAtTime(0.7 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.01 * this.volume, time + this.decay / 2);\n\n        this.osc.start(time);\n        this.noise.start(time);\n        this.osc.stop(time + this.decay);\n        this.noise.stop(time + this.decay);\n    }\n\n    setTone = (tone) => {\n        this.tone = tone;\n    }\n    setVolume = (vol) => {\n        this.volume = vol;\n    }\n    setFXAmount = (amount) => {\n        this.fxAmount = amount;\n    }\n}\n","export class HiHat {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.ratios = [1, 1.3420, 1.2312, 1.6532, 1.9523, 2.1523];\n        this.tone = 130.81;\n        this.decay = 0.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n\n        this.hasSetup = false;\n    }\n\n    setup() {\n        this.oscEnvelope = this.ctx.createGain();\n        this.bndPass = this.ctx.createBiquadFilter();\n        this.bndPass.type = 'bandpass';\n        this.bndPass.frequency.value = 20000;\n        this.bndPass.Q.value = 0.2;\n        this.hipass = this.ctx.createBiquadFilter();\n        this.hipass.type = \"highpass\";\n        this.hipass.frequency.value = 5000;\n        this.panner = this.ctx.createStereoPanner();\n\n        this.bndPass.connect(this.hipass);\n        this.hipass.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.panner);\n        this.panner.connect(this.ctx.destination);\n        this.hasSetup = true;\n    }\n\n    trigger(time) {\n        if (this.volume === 0) { return };\n        if (!this.hasSetup) {\n          this.setup();\n        }\n\n        this.panner.pan.value = Math.cos(time * 4) * this.fxAmount/100;\n        this.ratios.forEach((ratio) => {\n            var osc = this.ctx.createOscillator();\n            osc.type = \"square\";\n            osc.frequency.value = this.tone * ratio;\n            osc.connect(this.bndPass);\n            osc.start(time);\n            osc.stop(time + this.decay);\n        });\n        this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.067 * this.decay);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay);\n    }\n\n    setTone = (tone) => {\n        this.tone = tone;\n    }\n    setVolume = (vol) => {\n        this.volume = vol;\n    }\n\n    setFXAmount = (amount) => {\n        this.fxAmount = amount;\n    }\n}\n","export class Clap {\n\n    constructor(ctx) {\n        this.tone = 130;\n        this.volume = 1;\n        this.decay = 0.3;\n        this.pulseWidth = 0.025;\n        this.ctx = ctx;\n        this.fxAmount = 0;\n        this.hasSetup = false;\n    }\n\n    noiseBuffer() {\n        var bufferSize = this.ctx.sampleRate;\n        var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n        return buffer;\n    }\n\n    setup() {\n        this.noise = this.ctx.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n        this.filter = this.ctx.createBiquadFilter();\n        this.filter.type = 'bandpass';\n        this.filter.frequency.value = this.tone * 2;\n        this.envelope = this.ctx.createGain();\n        this.feedback = this.ctx.createGain();\n        this.echo = this.ctx.createDelay();\n        // this.echo.delayTime.value = Time('6n').toSeconds() // TODO\n        this.feedback.gain.value = 0.99 * this.fxAmount/100;\n\n        this.noise.connect(this.filter);\n        this.filter.connect(this.envelope);\n        \n        this.envelope.connect(this.echo);\n        this.echo.connect(this.feedback);\n        this.feedback.connect(this.echo);\n        this.feedback.connect(this.ctx.destination);\n        this.envelope.connect(this.ctx.destination);\n        this.hasSetup = true;\n    }\n\n    trigger = (time) => {\n        if (this.volume === 0) { return };\n        if (!this.hasSetup) {\n          this.setup();\n        }\n\n        this.envelope.gain.setValueAtTime(this.volume, time);\n        this.envelope.gain.exponentialRampToValueAtTime(0.1, time + this.pulseWidth);\n\n        this.envelope.gain.setValueAtTime(this.volume, time + this.pulseWidth);\n        this.envelope.gain.exponentialRampToValueAtTime(0.1, time + 2 * this.pulseWidth);\n\n        this.envelope.gain.setValueAtTime(this.volume, time + 2 * this.pulseWidth);\n        this.envelope.gain.exponentialRampToValueAtTime(0.001, time + this.decay);\n\n        this.noise.start(time)\n        this.noise.stop(time + this.decay);\n    }\n\n    setTone = (tone) => {\n        this.tone = tone;\n    }\n\n    setVolume = (volume) => {\n        this.volume = volume;\n    }\n\n    setFXAmount = (amount) => {\n        this.fxAmount = amount;\n    }\n}\n","export class Cymbal {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.ratios = [1, 1.3420, 1.2312, 1.6532, 1.9523, 2.1523];\n        this.tone = 130.81;\n        this.decay = 1.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n    }\n\n    async setup() {\n        this.noise = this.ctx.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n        this.noiseEnvelope = this.ctx.createGain();\n        this.noiseFilter = this.ctx.createBiquadFilter();\n        this.noiseFilter.type = 'highpass';\n        this.noiseFilter.frequency.value = 2000;\n        this.oscEnvelope = this.ctx.createGain();\n        this.bndPass = this.ctx.createBiquadFilter();\n        this.bndPass.type = 'bandpass';\n        this.bndPass.frequency.value = 20000;\n        this.bndPass.Q.value = 0.2;\n        this.hipass = this.ctx.createBiquadFilter();\n        this.hipass.type = \"highpass\";\n        this.hipass.frequency.value = 5000;\n        this.noise.connect(this.noiseFilter);\n        this.noiseFilter.connect(this.noiseEnvelope);\n\n        this.bndPass.connect(this.hipass);\n        this.hipass.connect(this.oscEnvelope);\n        this.noiseEnvelope.connect(this.ctx.destination);\n        this.oscEnvelope.connect(this.ctx.destination);\n    }\n\n    noiseBuffer() {\n        var bufferSize = this.ctx.sampleRate;\n        var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return buffer;\n    }\n\n    trigger(time) {\n        if (this.volume === 0) { return };\n        this.setup();\n\n        this.ratios.forEach((ratio) => {\n            var osc = this.ctx.createOscillator();\n            osc.type = \"square\";\n            // Frequency is the fundamental * this oscillator's ratio\n            osc.frequency.value = this.tone * ratio;\n            osc.connect(this.bndPass);\n            osc.start(time);\n            osc.stop(time + this.decay);\n        });\n\n        this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.01);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay + this.fxAmount/100);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay + this.fxAmount/50);\n    }\n\n    setTone = (tone) => {\n        this.tone = tone;\n    }\n    setVolume = (vol) => {\n        this.volume = vol;\n    }\n    setFXAmount = (amount) => {\n        this.fxAmount = parseFloat(amount);\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nimport audioScheduler from \"./middlewares/audioScheduler\";\nimport visualScheduler from \"./middlewares/visualScheduler\";\nimport midiListener from \"./middlewares/midiListener\";\n\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(audioScheduler, visualScheduler, midiListener)\n  );\n}\n"],"sourceRoot":""}