{"version":3,"sources":["components/Waveform.js","actions/loop.js","actions/grid.js","components/LoopPanel.js","components/GridPanel.js","audioUtils.js","components/Controls.js","App.js","reducers/loopReducer.js","reducers/gridReducer.js","middlewares/midiListener.js","reducers/rootReducer.js","middlewares/audioScheduler.js","middlewares/visualScheduler.js","serviceWorker.js","index.js","store.js"],"names":["Waveform","props","buffer","width","height","zoom","color","onDone","pixelRatio","window","devicePixelRatio","canvas","useRef","useLayoutEffect","context","current","getContext","w","middle","channelData","getChannelData","step","Math","ceil","length","fillStyle","draw","dw","floor","dh","style","ref","data","ctx","i","min","max","j","datum","fillRect","memo","prevProps","nextProps","id","createLoop","type","payload","randomColor","uuidv4","TOGGLE_PLAY","togglePlay","setLoopLength","loopLength","triggerNote","note","velocity","Loop","index","active","tempo","setActiveLoopA","beatDuration","lengthInBeats","round","duration","useDrag","item","opacity","drag","className","paddingTop","onClick","connect","state","loops","loop","activeLoop","grid","dispatch","createLoopA","loopId","setActiveLoop","map","l","key","GridLoopMarker","soft","numMarkers","backgroundColor","Grid","beat","loopTriggers","barBeat","loopTails","setGridElemA","addLoopInstanceA","drop","useDrop","accept","instanceId","activeLoops","g","originLoop","find","range","flat","filter","start","end","val","domElem","setGridElem","addLoopInstance","beats","beatsPerBar","LATENCY_MS","audioCtx","getAudioCtx","AudioContext","latencyHint","recordRawInputStream","stream","endTime","recorder","MediaRecorder","Promise","resolve","ondataavailable","evt","currentTime","stop","then","d","arrayBuffer","err","decodeAudioData","result","sumAudio","reduce","sum","sample","abs","a","osc","createOscillator","frequency","value","destination","cTime","recordedBufferP","recordedBufferRes","recordedBuffer","sampleRate","recordingOffset","firstSecondOfAudio","slice","averageAudioValue","referenceDecibel","log10","threshold","pow","latency","console","log","playing","metronome","gain","mediaStream","inputDeviceList","midiDeviceList","activeInputDevice","togglePlayA","toggleMetronomeA","setTempoA","setTempo","setGainA","setGain","setInputDevicesA","devices","setInputDevices","setMidiDevicesA","setMidiDevices","setMediaStreamA","setMediaStream","setLoopLengthA","useEffect","deviceId","navigator","mediaDevices","getUserMedia","audio","AUDIO_CONFIG","echoCancellation","noiseSuppression","autoGainControl","initDevices","midi","midiIn","inputs","values","input","next","done","push","requestMIDIAccess","addEventListener","event","target","enumerateDevices","res","deviceOpts","acc","dev","kind","label","midiDeviceOpts","name","theme","onChange","runLatencyTest","options","isClient","getSize","useCallback","innerWidth","undefined","innerHeight","useState","windowSize","setWindowSize","handleResize","removeEventListener","useWindowSize","gridWidth","cls","DndProvider","backend","Backend","activeBeat","href","initialState","loopsInUse","gridElems","quantizationBeats","activeMidiDevice","Array","keys","combineReducers","action","createdAt","Date","now","other","oldest","indexOfOldest","indexOf","indexOfOldestUnused","gridItem","audioScheduler","store","nextNoteTime","nextBeat","frame","getState","secondsPerBeat","forEach","source","createBufferSource","gainNode","createGain","setValueAtTime","triggerLoopsAtBeat","loopStart","loopEnd","secondsUntilEnd","outputAudioBuffer","createBuffer","outB","inB","t","recordInputStream","b","time","triggerMetronome","requestAnimationFrame","cancelAnimationFrame","visualScheduler","nextGridChangeTime","nextGridBeat","prevBeat","classList","remove","add","elem","KEY_TO_NOTE","NOTE_TO_KEY","number2key","n","midiListener","listeningTo","msg","cmd","listen","newAction","C1","D1","E1","F1","Boolean","location","hostname","match","ReactDOM","render","StrictMode","createStore","rootReducer","applyMiddleware","configureStore","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de02f4d4.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect, memo } from \"react\";\n\nconst Waveform = (props = {}) => {\n  const {\n    buffer = null,\n    width = 500,\n    height = 100,\n    zoom = 1,\n    color = \"black\",\n    onDone = null,\n    pixelRatio = window.devicePixelRatio,\n  } = props;\n\n  const canvas = useRef(null);\n\n  useLayoutEffect(() => {\n    const context = canvas.current.getContext(\"2d\");\n\n    var w = width * zoom;\n    var middle = height / 2.0;\n\n    var channelData = buffer.getChannelData(0);\n    var step = Math.ceil(channelData.length / w);\n\n    context.fillStyle = color;\n    draw(width, step, middle, channelData, context);\n\n    if (onDone) {\n      onDone();\n    }\n  });\n\n  const dw = Math.floor(pixelRatio * width * zoom);\n  const dh = Math.floor(pixelRatio * height);\n  const style = { width: width * zoom, height };\n  return <canvas ref={canvas} width={dw} height={dh} style={style} />;\n};\n\nfunction draw(width, step, middle, data, ctx) {\n  for (var i = 0; i < width; i += 1) {\n    var min = 1.0;\n    var max = -1.0;\n\n    for (var j = 0; j < step; j += 1) {\n      var datum = data[i * step + j];\n\n      if (datum < min) {\n        min = datum;\n      } else if (datum > max) {\n        max = datum;\n      }\n\n      ctx.fillRect(i, (1 + min) * middle, 1, Math.max(1, (max - min) * middle));\n    }\n  }\n}\n\n// Use the loop ID equality as a proxy for the buffer equality\nexport default memo(\n  (props) => <Waveform {...props} />,\n  (prevProps, nextProps) => \n    (\n      prevProps.id === nextProps.id &&\n      prevProps.width === nextProps.width &&\n      prevProps.height === nextProps.height &&\n      prevProps.color === nextProps.color\n    )\n  \n);\n","import { v4 as uuidv4 } from \"uuid\";\nimport randomColor from \"randomcolor\";\nexport const CREATE_LOOP = \"@GRID/CREATE_LOOP\";\n\nexport const createLoop = (buffer) => ({\n  type: CREATE_LOOP,\n  payload: {\n    buffer,\n    color: randomColor(),\n    id: uuidv4(),\n  },\n});\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const TOGGLE_PLAY = '@GRID/TOGGLE_PLAY';\nexport const TOGGLE_METRONOME = '@GRID/TOGGLE_METRONOME';\nexport const SET_TEMPO = '@GRID/SET_TEMPO';\nexport const SET_GAIN = '@GRID/SET_GAIN';\nexport const SET_ACTIVE_LOOP = '@GRID/SET_ACTIVE_LOOP';\nexport const SET_INPUT_DEVICES = '@GRID/SET_INPUT_DEVICES';\nexport const SET_MIDI_DEVICES = '@GRID/SET_MIDI_DEVICES';\nexport const SET_LOOP_LENGTH = '@GRID/SET_LOOP_LENGTH';\nexport const SET_MEDIA_STREAM = '@GRID/SET_MEDIA_STREAM';\nexport const SET_GRID_ELEM = '@GRID/SET_GRID_ELEM';\nexport const ADD_LOOP_INSTANCE = '@GRID/ADD_LOOP_INSTANCE';\nexport const TRIGGER_NOTE = '@GRID/TRIGGER_NOTE';\n\nexport const addLoopInstance = (beat, loopId) => ({\n  type: ADD_LOOP_INSTANCE,\n  payload: { beat, loopId, instanceId: uuidv4() }\n});\nexport const togglePlay = () => ({\n  type: TOGGLE_PLAY,\n});\nexport const toggleMetronome = () => ({\n  type: TOGGLE_METRONOME,\n});\nexport const setActiveLoop = (loopId) => ({\n  type: SET_ACTIVE_LOOP,\n  payload: { loopId }\n});\nexport const setLoopLength = (loopLength) => ({\n  type: SET_LOOP_LENGTH,\n  payload: { loopLength }\n});\nexport const setGain = (gain) => ({\n  type: SET_GAIN,\n  payload: { gain }\n});\nexport const setInputDevices = (devices) => ({\n  type: SET_INPUT_DEVICES,\n  payload: { devices }\n});\nexport const setMidiDevices = (devices) => ({\n  type: SET_MIDI_DEVICES,\n  payload: { devices }\n});\nexport const setMediaStream = (stream) => ({\n  type: SET_MEDIA_STREAM,\n  payload: { stream }\n});\nexport const setTempo = (tempo) => ({\n  type: SET_TEMPO,\n  payload: { tempo }\n});\nexport const setGridElem = (index, domElem) => ({\n  type: SET_GRID_ELEM,\n  payload: { index, domElem }\n});\nexport const triggerNote = (note, velocity) => ({\n  type: TRIGGER_NOTE,\n  payload: { note, velocity }\n});\n","import React, { useEffect } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { connect } from \"react-redux\";\n\nimport Waveform from \"./Waveform\";\n\nimport { createLoop } from \"../actions/loop\";\nimport { setActiveLoop } from \"../actions/grid\";\n\n// var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n// function getData() {\n//   const request = new XMLHttpRequest();\n//   request.open(\"GET\", \"Amen-break.mp3\", true);\n//   request.responseType = \"arraybuffer\";\n//\n//   return new Promise((resolve, reject) => {\n//     request.onload = function () {\n//       const audioData = request.response;\n//\n//       audioCtx.decodeAudioData(\n//         audioData,\n//         function (buffer) {\n//           resolve(buffer);\n//         },\n//         function (e) {\n//           reject(\"Error with decoding audio data\" + e.err);\n//         }\n//       );\n//     };\n//\n//     request.send();\n//   });\n// }\n\nfunction Loop({\n  id,\n  index,\n  length,\n  active,\n  color,\n  buffer,\n  width,\n  height,\n  tempo,\n  setActiveLoopA,\n}) {\n  const beatDuration = 60.0 / tempo;\n  const lengthInBeats = Math.round(buffer.duration / beatDuration);\n\n  // Allow loops to be dragged onto the grid\n  const [{ opacity }, drag] = useDrag({\n    item: { id, type: 'LOOP' },\n  });\n\n  return (\n    <div\n      ref={drag}\n      className={`Loop ${active ? \"active\" : \"\"}`}\n      style={{ opacity, height, width, paddingTop: 20 }}\n      onClick={() => setActiveLoopA(id)}\n    >\n      <Waveform\n        id={id}\n        width={width}\n        height={height - 20}\n        color={color}\n        buffer={buffer}\n      />\n      <div>Loop {index} {'//'} {lengthInBeats} beats</div>\n    </div>\n  );\n}\n\nfunction LoopPanel({ loops, width, tempo, activeLoop, createLoopA, setActiveLoopA }) {\n  const height = 75;\n\n  // useEffect(() => {\n  //   getData().then((buffer) => createLoopA(buffer));\n  // }, [createLoopA]);\n\n  return (\n    <div className=\"LoopPanel\" style={{ width }}>\n      {loops.map((l, index) => (\n        <Loop\n          key={l.id}\n          index={index}\n          setActiveLoopA={setActiveLoopA}\n          active={activeLoop === l.id}\n          {...l}\n          tempo={tempo}\n          width={width - 20}\n          height={height}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loops: state.loop.loops,\n  activeLoop: state.grid.activeLoop,\n  tempo: state.grid.tempo,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  createLoopA: (buffer) => dispatch(createLoop(buffer)),\n  setActiveLoopA: (loopId) => dispatch(setActiveLoop(loopId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoopPanel);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useDrop } from \"react-dnd\";\n\nimport { setGridElem, addLoopInstance } from \"../actions/grid\";\n\nfunction GridLoopMarker({ id, color, soft, numMarkers }) {\n  const opacity = soft ? 0.3 : 1;\n  return (\n    <div\n      className={`GridLoopMarker ${numMarkers > 4 ? 'half' : ''}`}\n      style={{ backgroundColor: color, opacity }}\n    />\n  );\n}\n\nfunction Grid({\n  beat,\n  barBeat,\n  loopTriggers,\n  loopTails,\n  activeLoop,\n  setGridElemA,\n  addLoopInstanceA,\n  onClick,\n}) {\n\n  // Add loop instances when they are dragged onto the grid\n  const drop = useDrop({\n    accept: ['LOOP'],\n    drop: (item) => addLoopInstanceA(beat, item.id)\n  })[1];\n\n  const numMarkers = loopTriggers.length + loopTails.length;\n\n  // Save a ref (into redux) so the scheduler can manipule the \"active\" class to\n  // animate the sequencer\n  return (\n    <div\n      ref={(ref) => {\n        setGridElemA(beat, ref);\n        drop(ref);\n      }}\n      className=\"Grid\"\n      onClick={onClick}\n    >\n      {loopTriggers.map((l) => (\n        <GridLoopMarker key={l.instanceId} {...l} numMarkers={numMarkers} />\n      ))}\n      {loopTails.map((l) => (\n        <GridLoopMarker key={l.instanceId} {...l} soft={true} numMarkers={numMarkers} />\n      ))}\n    </div>\n  );\n}\n\nfunction GridPanel({\n  activeLoop,\n  width,\n  grid,\n  beats,\n  beatsPerBar,\n  setGridElemA,\n  addLoopInstanceA,\n}) {\n  return (\n    <div className=\"GridPanel\" style={{ width, height: width }}>\n      {grid.map((g) => (\n        <Grid\n          key={g.beat}\n          {...g}\n          setGridElemA={setGridElemA}\n          addLoopInstanceA={addLoopInstanceA}\n          onClick={() => activeLoop && addLoopInstanceA(g.beat, activeLoop)}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst inRange = (start, end, val) => val >= start && val <= end;\n\nconst mapStateToProps = (state) => {\n  const tempo = state.grid.tempo;\n\n  const activeLoops = state.grid.grid\n    .map((g) =>\n      g.loopTriggers.map(({ id, instanceId }) => {\n        const originLoop = state.loop.loops.find((l) => l.id === id);\n        const beatDuration = 60.0 / tempo;\n        const lengthInBeats = Math.round(originLoop.buffer.duration / beatDuration);\n\n        const range = [\n          g.beat,\n          (g.beat + lengthInBeats - 1) % state.grid.grid.length,\n        ];\n\n        return {\n          range,\n          instanceId,\n          ...originLoop,\n        };\n      })\n    )\n    .flat();\n\n  const grid = state.grid.grid.map((g) => {\n    const loopTriggers = activeLoops.filter((l) => l.range[0] === g.beat);\n    const loopTails = activeLoops.filter((l) =>\n      inRange(l.range[0] + 1, l.range[1], g.beat) ||\n      (l.range[0] > l.range[1] && g.beat > l.range[0]) ||\n      (l.range[0] > l.range[1] && g.beat < l.range[1])\n    );\n\n    return {\n      ...g,\n      loopTriggers,\n      loopTails,\n    };\n  });\n\n  return {\n    ...state.grid,\n    grid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setGridElemA: (index, domElem) => dispatch(setGridElem(index, domElem)),\n  addLoopInstanceA: (beat, loopId) => dispatch(addLoopInstance(beat, loopId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GridPanel);\n","const SCHEDULE_AHEAD_TIME = 0.1;\nconst BLIP_LENGTH = 0.01;\n\n//\n// Global value set by the latency test.\n// \n// TODO: Put in localStorage\n//\nlet LATENCY_MS = 100;\n\nlet audioCtx = null;\nexport function getAudioCtx() {\n  if (audioCtx) return audioCtx;\n\n  audioCtx = new AudioContext({ latencyHint: 0 });\n  return audioCtx;\n}\n\nexport function getDeviceStream(deviceId) {\n  const AUDIO_CONFIG = {\n    echoCancellation: false,\n    noiseSuppression: false,\n    autoGainControl: false,\n    latency: 0,\n  };\n  return navigator.mediaDevices.getUserMedia({\n    audio: { AUDIO_CONFIG, deviceId },\n  });\n}\n\nexport function triggerMetronome(audioCtx, b, time, beats, beatsPerBar) {\n  const osc = audioCtx.createOscillator();\n  osc.connect(audioCtx.destination);\n\n  if (b % beats === 0) {\n    osc.frequency.value = 880.0;\n  } else if (b % beatsPerBar === 0) {\n    osc.frequency.value = 440.0;\n  } else {\n    osc.frequency.value = 220.0;\n  }\n\n  osc.start(time);\n  osc.stop(time + BLIP_LENGTH);\n}\n\nexport function triggerLoopsAtBeat(\n  grid,\n  loops,\n  nextBeat,\n  beats,\n  audioCtx,\n  gain,\n  nextNoteTime\n) {\n  const { loopTriggers } = grid[nextBeat % beats];\n\n  loopTriggers\n    .map(({ id }) => loops.find((l) => l.id === id))\n    .forEach(({ buffer }) => {\n      const source = audioCtx.createBufferSource();\n\n      // set the buffer in the AudioBufferSourceNode\n      source.buffer = buffer;\n\n      // TODO: Find a better place to apply global gain\n      // start the source playing\n      const gainNode = audioCtx.createGain();\n      gainNode.gain.setValueAtTime(gain, audioCtx.currentTime);\n      source.connect(gainNode).connect(audioCtx.destination);\n      source.start(nextNoteTime);\n    });\n}\n\nfunction recordRawInputStream(stream, audioCtx, duration) {\n  const recorder = new MediaRecorder(stream);\n  recorder.start(duration * 1000);\n  let endTime;\n  return new Promise(\n    (resolve) =>\n      (recorder.ondataavailable = (evt) => {\n        endTime = audioCtx.currentTime;\n\n        if (recorder.state === \"recording\") {\n          recorder.stop();\n        }\n        resolve(evt.data);\n      })\n  )\n    .then((d) => d.arrayBuffer())\n    .then(\n      (d) =>\n        new Promise((resolve, err) =>\n          audioCtx.decodeAudioData(\n            d,\n            (result) => resolve([result, endTime]),\n            err\n          )\n        )\n    );\n}\n\nexport function recordInputStream(stream, audioCtx, start, end) {\n  // This should record the full loop with a small gap at the start and end\n  const secondsUntilEnd = end - audioCtx.currentTime;\n  const recordingLength = secondsUntilEnd + 2 * SCHEDULE_AHEAD_TIME;\n\n  return recordRawInputStream(stream, audioCtx, recordingLength).then(\n    ([d, endTime]) => {\n      // Calculate the difference in requested and recorded durations\n      // const durOffset = d.duration - recordingLength;\n      // const durOffset = -0.180;\n      // console.log(durOffset);\n\n      const sampleRate = d.sampleRate;\n      const outputAudioBuffer = audioCtx.createBuffer(\n        1,\n        (end - start) * sampleRate,\n        sampleRate\n      );\n\n      // Offset the recording by the global system latency value\n      const outB = outputAudioBuffer.getChannelData(0);\n      const inB = d.getChannelData(0);\n      for (let t = 0; t < (end - start) * sampleRate; t++) {\n        outB[t] = inB[t + Math.floor(LATENCY_MS * sampleRate / 1000)];\n      }\n\n      return outputAudioBuffer;\n    }\n  );\n\n  // return rawRecordingP;\n\n  // const [delay, recording] = Promise.all([startDelayP, rawRecordingP]);\n  // return recording;\n  // .then((d) => {\n  //   const sampleRate = 44100;\n  //   const outputAudioBuffer = audioCtx.createBuffer(2, (end - start) * sampleRate, sampleRate);\n  //\n  //   for (let channel = 0; channel < 2; channel++) {\n  //     const channelBuffer = outputAudioBuffer.getChannelData(channel);\n  //\n  //     // for (let t = 0; t < (end - start); t++) {\n  //       // channelBuffer[t] = d[channel][t\n  //     // }\n  //   }\n  //\n  //   return outputAudioBuffer;\n  // });\n}\n\nfunction sumAudio(buffer) {\n  return buffer.reduce((sum, sample) => sum + Math.abs(sample), 0);\n}\n\n/**\n * Play a sine wave and record the delay in hearing it\n *\n * Adapted from:\n *\n *   https://github.com/superpoweredSDK/WebBrowserAudioLatencyMeasurement\n */\nexport async function runLatencyTest(stream) {\n  const audioCtx = getAudioCtx();\n  const osc = audioCtx.createOscillator();\n  osc.frequency.value = 440.0;\n  osc.connect(audioCtx.destination);\n\n  const cTime = audioCtx.currentTime;\n\n  // Sequence of events:\n  //\n  //  - 2 seconds of silence (cTime + 2)\n  //  - 1 second of 440hz sine wave (cTime + 3)\n  //  - finish recording and sine wave (cTime + 4)\n  const recordedBufferP = recordRawInputStream(stream, audioCtx, 4);\n  osc.start(cTime + 2);\n  osc.stop(cTime + 3);\n\n  // Wait for the recording to finish\n  const [recordedBufferRes, endTime] = await recordedBufferP;\n  const recordedBuffer = recordedBufferRes.getChannelData(0);\n\n  // Now we have a buffer with roughly 1 second of sound louder than the rest. We\n  // want to isolate that and determine its timestamp then compare that to when it\n  // should have been recorded (cTime + 2 -> cTime + 3). The difference will be the\n  // recording latency\n\n  const { sampleRate } = recordedBufferRes;\n  // The recording takes a small amount of time to start, so the timing in the buffer\n  // is shifted slightly later. I'm still not sure how to apply this. We will need to\n  // account for this in our loop slicing somehow.\n  const recordingOffset = (endTime - 4) * 1000;\n\n  // Calculate the baseline audio amplitude during the \"silence period\", then\n  // take an audio energy rise of 24 decibels to be the threshold for identifying\n  // the start of the oscillator starting\n  const firstSecondOfAudio = recordedBuffer.slice(0, sampleRate);\n  const averageAudioValue = sumAudio(firstSecondOfAudio) / sampleRate;\n  const referenceDecibel = 20.0 * Math.log10(averageAudioValue) + 24.0;\n  const threshold = Math.pow(10.0, referenceDecibel / 20.0);\n\n  let latency = null;\n  // Look from (cTime + 1) to (cTime + 4) for the start of the oscillator pulse\n  for (let i = sampleRate; i < sampleRate * 4; i++) {\n    if (recordedBuffer[i] > Math.abs(threshold)) {\n      latency = Math.round(Math.abs(2000 - (i * 1000) / sampleRate));\n      break;\n    }\n  }\n\n  console.log(recordingOffset);\n  console.log(latency);\n  LATENCY_MS = latency;\n  return latency;\n}\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport ReactControlPanel, {\n  Select,\n  Range,\n  Checkbox,\n} from \"react-control-panel\";\n\nimport {\n  setTempo,\n  togglePlay,\n  toggleMetronome,\n  setLoopLength,\n  setGain,\n  setInputDevices,\n  setMediaStream,\n  setMidiDevices,\n} from \"../actions/grid\";\nimport { getDeviceStream, runLatencyTest } from \"../audioUtils\";\n\nfunction Controls({\n  playing,\n  loopLength,\n  gain,\n  width,\n  tempo,\n  metronome,\n  mediaStream,\n  midiDeviceList,\n  activeInputDevice,\n  inputDeviceList,\n\n  togglePlayA,\n  setGainA,\n  setTempoA,\n  toggleMetronomeA,\n  setInputDevicesA,\n  setMidiDevicesA,\n  setMediaStreamA,\n  setLoopLengthA,\n}) {\n  //\n  // Get permission to access input audio stream\n  //\n  useEffect(() => {\n    getDeviceStream(activeInputDevice)\n      .then((stream) => setMediaStreamA(stream));\n  }, [setMediaStreamA, activeInputDevice]);\n\n  useEffect(() => {\n    // https://glitch.com/~webmidi-examples\n    // Reset.\n    function initDevices(midi) {\n      const midiIn = [];\n      const inputs = midi.inputs.values();\n      for (\n        let input = inputs.next();\n        input && !input.done;\n        input = inputs.next()\n      ) {\n        midiIn.push(input.value);\n      }\n\n      setMidiDevicesA(midiIn);\n    }\n\n    navigator.requestMIDIAccess().then(\n      (midi) => {\n        // Also react to device changes.\n        midi.addEventListener(\"statechange\", (event) =>\n          initDevices(event.target)\n        );\n        initDevices(midi);\n      },\n      (err) => console.log(\"Something went wrong\", err)\n    );\n  }, [setMidiDevicesA]);\n\n  // When we have permission to access the WebAudio API, get the list of connected devices\n  useEffect(() => {\n    if (mediaStream) {\n      navigator.mediaDevices\n        .enumerateDevices()\n        .then((res) => setInputDevicesA(res));\n    }\n  }, [mediaStream, setInputDevicesA]);\n\n  const deviceOpts = inputDeviceList.reduce((acc, dev) => {\n    if (dev.kind === \"audioinput\") {\n      acc[dev.label] = dev.deviceId;\n    }\n    return acc;\n  }, {});\n\n  const midiDeviceOpts = midiDeviceList.reduce((acc, dev) => {\n    if (dev.type === \"input\") {\n      acc[dev.name] = dev.id;\n    }\n    return acc;\n  }, {});\n\n  return (\n    <ReactControlPanel\n      theme=\"light\"\n      width={width * 0.6}\n      onChange={(key, val) => {\n        if (key === \"tempo\") {\n          setTempoA(val);\n        }\n        if (key === \"metronome\") {\n          toggleMetronomeA();\n        }\n        if (key === \"gain\") {\n          setGainA(val);\n        }\n        if (key === \"latency\") {\n          runLatencyTest(mediaStream);\n        }\n        if (key === \"loop length\") {\n          if (val !== 12) {\n            setLoopLengthA(val);\n          }\n        }\n      }}\n      state={{\n        latency: false,\n        tempo,\n        gain,\n        metronome,\n        \"loop length\": loopLength,\n      }}\n    >\n      <Range label=\"loop length\" min={4} max={16} step={4} />\n      <Range label=\"tempo\" min={40} max={260} step={1} />\n      <Range label=\"gain\" min={0} max={1} />\n      <Checkbox label=\"metronome\" />\n      <Select label=\"input\" options={deviceOpts} />\n      <Select label=\"inputmidi\" options={midiDeviceOpts} />\n      <Checkbox label=\"latency\" />\n    </ReactControlPanel>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  togglePlayA: () => dispatch(togglePlay()),\n  toggleMetronomeA: () => dispatch(toggleMetronome()),\n  setTempoA: (tempo) => dispatch(setTempo(tempo)),\n  setGainA: (gain) => dispatch(setGain(gain)),\n  setInputDevicesA: (devices) => dispatch(setInputDevices(devices)),\n  setMidiDevicesA: (devices) => dispatch(setMidiDevices(devices)),\n  setMediaStreamA: (stream) => dispatch(setMediaStream(stream)),\n  setLoopLengthA: (loopLength) => dispatch(setLoopLength(loopLength)),\n});\nconst mapStateToProps = (state) => ({\n  playing: state.grid.playing,\n  tempo: state.grid.tempo,\n  metronome: state.grid.metronome,\n  gain: state.grid.gain,\n  loopLength: state.grid.loopLength,\n  mediaStream: state.grid.mediaStream,\n  inputDeviceList: state.grid.inputDeviceList,\n  midiDeviceList: state.grid.midiDeviceList,\n  activeInputDevice: state.grid.activeInputDevice,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\n\nimport LoopPanel from \"./components/LoopPanel\";\nimport GridPanel from \"./components/GridPanel\";\nimport Controls from \"./components/Controls\";\nimport \"./App.css\";\n\nimport { togglePlay } from \"./actions/grid\";\n\nfunction useWindowSize() {\n  const isClient = typeof window === \"object\";\n\n  const getSize = useCallback(() => {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    };\n  }, [isClient]);\n\n  const [windowSize, setWindowSize] = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [getSize, isClient]);\n\n  return windowSize;\n}\n\nfunction App({ playing, togglePlayA }) {\n  const { width, height } = useWindowSize();\n  const gridWidth = Math.min(0.75 * width, height - 120);\n\n  const cls = playing ? \"pause\" : \"\";\n  return (\n    <div className=\"Wrapper\">\n      <header className=\"Controls\">\n        <button className={`PlayButton ${cls}`} onClick={togglePlayA} />\n\n        <Controls width={width} />\n      </header>\n      <div className=\"App\">\n        <DndProvider backend={Backend}>\n          <GridPanel width={gridWidth} activeBeat={0} />\n          <LoopPanel width={width - gridWidth} />\n        </DndProvider>\n      </div>\n      <footer>\n        By <a href=\"https://jtfell.com\">jtfell</a>\n      </footer>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  togglePlayA: () => dispatch(togglePlay()),\n});\nconst mapStateToProps = (state) => ({\n  playing: state.grid.playing,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CREATE_LOOP } from \"../actions/loop\";\nimport { ADD_LOOP_INSTANCE } from \"../actions/grid\";\n\n// Loop: {\n//   id,\n//   createdAt,\n//   buffer\n// }\n\nconst initialState = {\n  loops: [],\n  loopsInUse: [],\n};\n\nconst MAX_LOOPS = 3;\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_LOOP: {\n      let loops = [...state.loops];\n\n      const createdAt = Date.now();\n      if (loops.length < MAX_LOOPS) {\n        loops = [...loops, { ...action.payload, createdAt }];\n        return {\n          ...state,\n          loops,\n        };\n      }\n\n      //\n      // We want the following properties:\n      //\n      //  - index of each loop remains stable\n      //  - list of loops is bounded (for screen space and memory reasons)\n      //  - the oldest loop is the one removed first\n      //  - loops used on the grid cant be removed\n      //\n      const [oldestUnused, indexOfOldestUnused] = loops.reduce(\n        ([oldest, indexOfOldest], other, index) => {\n          // Early return if the loop is used on the grid\n          const inUse = state.loopsInUse.indexOf(other.id) > -1;\n          if (inUse) {\n            return [oldest, indexOfOldest];\n          }\n\n          // If there is no other candidate, return the loop\n          if (oldest === null) {\n            return [other, index];\n          }\n\n          // If oldest is newer than the candidate, return the candidate\n          if (oldest.createdAt > other.createdAt) {\n            return [other, index];\n          }\n\n          return [oldest, indexOfOldest];\n        },\n        [null, -1]\n      );\n\n      if (indexOfOldestUnused > -1) {\n        loops[indexOfOldestUnused] = { ...action.payload, createdAt };\n      } else {\n        console.log(\"No space!\");\n        // Alert the user there is no space in the buffer somehow?\n      }\n\n      return {\n        ...state,\n        loops,\n      };\n    }\n    case ADD_LOOP_INSTANCE: {\n      // let loops = [...state.loops];\n      // loops = loops.map(loop => {\n      //   if (loop.id === action.payload.loopId) {\n      //     loop.isBeingUsed = true;\n      //   }\n      //   return loop;\n      // });\n      //\n      // console.log(loops, action.payload);\n\n      return {\n        ...state,\n        loopsInUse: [...state.loopsInUse, action.payload.loopId],\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import {\n  TOGGLE_PLAY,\n  TOGGLE_METRONOME,\n  SET_ACTIVE_LOOP,\n  SET_GAIN,\n  SET_TEMPO,\n  SET_LOOP_LENGTH,\n  SET_INPUT_DEVICES,\n  SET_MIDI_DEVICES,\n  SET_MEDIA_STREAM,\n  SET_GRID_ELEM,\n  ADD_LOOP_INSTANCE,\n} from \"../actions/grid\";\n\nwindow.gridElems = [];\n\nconst initialState = {\n  beatsPerBar: 4,\n  beats: 16,\n  playing: false,\n  metronome: true,\n  tempo: 136.55,\n  loopLength: 8,\n  quantizationBeats: 4,\n  gain: 0.2,\n\n  // The highlighted loop that will be added to the grid when its clicked\n  activeLoop: null,\n\n  activeMidiDevice: null,\n  midiDeviceList: [],\n\n  activeInputDevice: null,\n  inputDeviceList: [],\n  mediaStream: null,\n\n  grid: generateGrid(16, 4),\n};\n\n// TODO: Seemless switching betweeen resolutions - different state per view\n\nfunction generateGrid(beats, beatsPerBar) {\n  return [...Array(beats).keys()].map((beat) => {\n    const barBeat = (beat + 1) % beatsPerBar;\n\n    return {\n      beat: beat + 1,\n      barBeat,\n      loopTriggers: [],\n    };\n  });\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_GRID_ELEM:\n      // Mutate in place as these are opaque refs\n      window.gridElems[action.payload.index - 1] = action.payload.domElem;\n      return state;\n    case ADD_LOOP_INSTANCE:\n      const grid = [...state.grid];\n      const gridItem = grid[action.payload.beat - 1];\n      gridItem.loopTriggers.push({\n        id: action.payload.loopId,\n        instanceId: action.payload.instanceId,\n      });\n\n      return {\n        ...state,\n        grid,\n      };\n    case TOGGLE_METRONOME:\n      return {\n        ...state,\n        metronome: !state.metronome,\n      };\n    case TOGGLE_PLAY:\n      return {\n        ...state,\n        playing: !state.playing,\n      };\n    case SET_ACTIVE_LOOP:\n      return {\n        ...state,\n        activeLoop: action.payload.loopId,\n      };\n    case SET_GAIN:\n      return {\n        ...state,\n        gain: action.payload.gain,\n      };\n    case SET_LOOP_LENGTH:\n      return {\n        ...state,\n        loopLength: action.payload.loopLength,\n      };\n    case SET_MIDI_DEVICES:\n      return {\n        ...state,\n        midiDeviceList: action.payload.devices,\n      };\n    case SET_INPUT_DEVICES:\n      return {\n        ...state,\n        inputDeviceList: action.payload.devices,\n      };\n    case SET_MEDIA_STREAM:\n      return {\n        ...state,\n        mediaStream: action.payload.stream,\n      };\n    case SET_TEMPO:\n      return {\n        ...state,\n        tempo: action.payload.tempo,\n      };\n    default:\n      return state;\n  }\n};\n","//\n// Middleware to convert midi events into redux actions\n//\n\nimport {\n  SET_MIDI_DEVICES,\n  toggleMetronome,\n  togglePlay,\n  setLoopLength,\n  TRIGGER_NOTE,\n  triggerNote,\n} from \"../actions/grid\";\n\n//\n// From Midi.js\n//\nconst KEY_TO_NOTE = {}; // C8  == 108\nconst NOTE_TO_KEY = {}; // 108 ==  C8\n\nconst A0 = 0x15; // first note\nconst C8 = 0x6c; // last note\nconst number2key = [\n  \"C\",\n  \"Db\",\n  \"D\",\n  \"Eb\",\n  \"E\",\n  \"F\",\n  \"Gb\",\n  \"G\",\n  \"Ab\",\n  \"A\",\n  \"Bb\",\n  \"B\",\n];\nfor (let n = A0; n <= C8; n++) {\n  const octave = ((n - 12) / 12) >> 0;\n  const name = number2key[n % 12] + octave;\n  KEY_TO_NOTE[name] = n;\n  NOTE_TO_KEY[n] = name;\n}\n\nconst NOTE_ON = 144;\n// const NOTE_OFF = 128;\n\nconst midiListener = (store) => (next) => {\n  // Listen to MIDI devices and dispatch actions when MIDI messages are received.\n  const listeningTo = [];\n  const listen = (devices, store) => {\n    for (const dev of devices) {\n      if (listeningTo.indexOf(dev.id) === -1) {\n        dev.addEventListener(\"midimessage\", (msg) => {\n          const [cmd, note, velocity] = msg.data;\n          if (cmd === NOTE_ON && velocity > 0) {\n            store.dispatch(triggerNote(NOTE_TO_KEY[note], velocity));\n          }\n        });\n        listeningTo.push(dev.id);\n      }\n    }\n  };\n\n  return (action) => {\n    next(action);\n\n    if (action.type === SET_MIDI_DEVICES) {\n      listen(action.payload.devices, store);\n    }\n\n    if (action.type === TRIGGER_NOTE) {\n      // TODO:\n      //\n      //  - toggle input mode:\n      //    > instrument (keyboard / sample pad)\n      //    > controller (start / stop / record / multiply / undo)\n      //\n      //  This allows us to start lighting up keys on the sample pad etc based on mode\n      //\n      const { note } = action.payload;\n\n      const { loopLength } = store.getState().grid;\n\n      // TODO:\n      //\n      //  - make this configurable in the app\n      //  - show current mapping in UI\n      //\n      //  Mapping for what each key does:\n      const NOTE_MAPPING = {\n        C1: () => togglePlay(),\n        D1: () => toggleMetronome(),\n        E1: () => setLoopLength(loopLength - 4),\n        F1: () => setLoopLength(loopLength + 4),\n      };\n\n      const newAction = NOTE_MAPPING[note];\n      if (newAction) {\n        store.dispatch(newAction());\n      } else {\n        console.log(`Unmapped midi note ${note}`);\n      }\n    }\n  };\n};\n\nexport default midiListener;\n","import { combineReducers } from \"redux\";\nimport loopReducer from \"./loopReducer\";\nimport gridReducer from \"./gridReducer\";\n\nexport default combineReducers({\n  loop: loopReducer,\n  grid: gridReducer,\n});\n","//\n// Middleware that handles scheduling all the active loops to play at the correct times. It\n// reacts to changes in the redux state while maintaining a consistent beat.\n//\n\nimport { TOGGLE_PLAY } from \"../actions/grid\";\nimport { createLoop } from \"../actions/loop\";\n\nimport { getAudioCtx, triggerMetronome, triggerLoopsAtBeat, recordInputStream } from \"../audioUtils\";\n\nconst SCHEDULE_AHEAD_TIME = 0.1;\n\nconst audioScheduler = (store) => (next) => {\n  let frame = null;\n  let nextNoteTime;\n  let nextBeat;\n\n  const loop = () => {\n    const audioCtx = getAudioCtx();\n    const state = store.getState();\n    const {\n      mediaStream,\n\n      playing,\n      metronome,\n      tempo,\n      grid,\n      gain,\n      beats,\n      beatsPerBar,\n      loopLength,\n    } = state.grid;\n    const { loops } = state.loop;\n    const secondsPerBeat = 60.0 / tempo;\n\n    try {\n      const cTime = audioCtx.currentTime;\n\n      //\n      // Manage audio triggering using a look-ahead scheduler\n      //\n      if (playing && nextNoteTime < cTime + SCHEDULE_AHEAD_TIME) {\n        // Get notes at \"nextBeat\" and schedule them to play in the webAudio audioCtx\n        triggerLoopsAtBeat(\n          grid,\n          loops,\n          nextBeat,\n          beats,\n          audioCtx,\n          gain,\n          nextNoteTime\n        );\n\n        // At this point, we lock in the current state in redux as what audio will be scheduled\n        // regardless of user changes.\n        if (nextBeat % loopLength === 0) {\n          const loopStart = nextNoteTime;\n          const loopEnd = nextNoteTime + loopLength * secondsPerBeat;\n\n          console.log(`New loop - ${loopStart} / ${loopEnd}`);\n\n          // Start recording the next loop\n          recordInputStream(\n            mediaStream,\n            audioCtx,\n            loopStart,\n            loopEnd\n          ).then((d) => store.dispatch(createLoop(d)));\n        }\n\n        // Trigger metronome on each beat\n        if (metronome) {\n          triggerMetronome(\n            audioCtx,\n            nextBeat,\n            nextNoteTime,\n            beats,\n            beatsPerBar\n          );\n        }\n\n        nextBeat += 1;\n        nextBeat %= beats;\n        // Set the next target to schedule for\n        nextNoteTime += secondsPerBeat;\n      }\n    } finally {\n      // TODO: Fallback to setTimeout if in background tab somehow... Otherwise I need\n      // to switch the audio loop to setTimeout and keep the UI on requestAnimationFrame (and\n      // take into account that multiple beats can be missed before the loop will resume)\n      frame = requestAnimationFrame(loop);\n    }\n  };\n\n  return (action) => {\n    // We need to track 2 versions of the state:\n    //\n    // 1. UI state (immediately updated on each user action)\n    // 2. Audio state (updated at the start of each quantization loop)\n\n    next(action);\n\n    // If the playing state has been toggled, start or stop the Raf loop\n    if (action.type === TOGGLE_PLAY && store.getState().grid.playing) {\n      const audioCtx = window.audioCtx || new AudioContext();\n      window.audioCtx = audioCtx;\n\n      nextBeat = 0;\n      nextNoteTime = audioCtx.currentTime + SCHEDULE_AHEAD_TIME;\n      frame = requestAnimationFrame(loop);\n    } else if (action.type === TOGGLE_PLAY && frame) {\n      cancelAnimationFrame(frame);\n    }\n  };\n};\n\nexport default audioScheduler;\n","//\n// Middleware that manages DOM updates of the grid & loop cursors based on the beat. We avoid\n// using React's reconciler for this as it schedules updates for a later point when we want\n// to prioritise frame-level precision of which grid square is lit up\n//\n\nimport { TOGGLE_PLAY } from \"../actions/grid\";\nimport { getAudioCtx } from \"../audioUtils\";\n\nconst SCHEDULE_AHEAD_TIME = 0.1;\nconst ANIMATION_TOLERANCE = -0.05;\n\nconst visualScheduler = (store) => (next) => {\n  let frame = null;\n\n  let nextGridChangeTime;\n  let nextGridBeat;\n\n  const loop = () => {\n    const audioCtx = getAudioCtx();\n    const state = store.getState();\n    const { playing, tempo, beats } = state.grid;\n    const secondsPerBeat = 60.0 / tempo;\n\n    try {\n      const cTime = audioCtx.currentTime;\n\n      //\n      // Manage visual animations in real-time\n      //\n      if (playing && nextGridChangeTime < cTime + ANIMATION_TOLERANCE) {\n        let prevBeat = nextGridBeat - 1;\n        if (prevBeat === -1) {\n          prevBeat = beats - 1;\n        }\n\n        window.gridElems[prevBeat].classList.remove(\"active\");\n        window.gridElems[nextGridBeat].classList.add(\"active\");\n\n        nextGridBeat += 1;\n        nextGridBeat %= beats;\n        nextGridChangeTime += secondsPerBeat;\n      }\n    } finally {\n      // TODO Take into account that multiple beats can be missed before the loop will resume\n      //      as the audio scheduler will continue and we need to stay in sync with it\n      frame = requestAnimationFrame(loop);\n    }\n  };\n\n  return (action) => {\n    // We need to track 2 versions of the state:\n    //\n    // 1. UI state (immediately updated on each user action)\n    // 2. Audio state (updated at the start of each quantization loop)\n\n    next(action);\n\n    // If the playing state has been toggled, start or stop the Raf loop\n    if (action.type === TOGGLE_PLAY && store.getState().grid.playing) {\n      const audioCtx = window.audioCtx || new AudioContext();\n      window.audioCtx = audioCtx;\n\n      nextGridBeat = 0;\n      nextGridChangeTime = audioCtx.currentTime + SCHEDULE_AHEAD_TIME;\n      frame = requestAnimationFrame(loop);\n    } else if (action.type === TOGGLE_PLAY && frame) {\n      window.gridElems.forEach((elem) => elem.classList.remove(\"active\"));\n      cancelAnimationFrame(frame);\n    }\n  };\n};\n\nexport default visualScheduler;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nimport audioScheduler from \"./middlewares/audioScheduler\";\nimport visualScheduler from \"./middlewares/visualScheduler\";\nimport midiListener from \"./middlewares/midiListener\";\n\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(audioScheduler, visualScheduler, midiListener)\n  );\n}\n"],"sourceRoot":""}